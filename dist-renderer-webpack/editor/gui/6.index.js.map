{"version":3,"file":"6.index.js","sources":["webpack:///./node_modules/esptool-js/lib/targets/esp32h2.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nimport ESP32H2_STUB from \"./stub_flasher/stub_flasher_32h2.json\";\nexport class ESP32H2ROM extends ROM {\n  constructor() {\n    super(...arguments);\n    this.CHIP_NAME = \"ESP32-H2\";\n    this.IMAGE_CHIP_ID = 16;\n    this.EFUSE_BASE = 0x60008800;\n    this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n    this.UART_CLKDIV_REG = 0x3ff40014;\n    this.UART_CLKDIV_MASK = 0xfffff;\n    this.UART_DATE_REG_ADDR = 0x6000007c;\n    this.FLASH_WRITE_SIZE = 0x400;\n    this.BOOTLOADER_FLASH_OFFSET = 0x0;\n    this.FLASH_SIZES = {\n      \"1MB\": 0x00,\n      \"2MB\": 0x10,\n      \"4MB\": 0x20,\n      \"8MB\": 0x30,\n      \"16MB\": 0x40\n    };\n    this.SPI_REG_BASE = 0x60002000;\n    this.SPI_USR_OFFS = 0x18;\n    this.SPI_USR1_OFFS = 0x1c;\n    this.SPI_USR2_OFFS = 0x20;\n    this.SPI_MOSI_DLEN_OFFS = 0x24;\n    this.SPI_MISO_DLEN_OFFS = 0x28;\n    this.SPI_W0_OFFS = 0x58;\n    this.USB_RAM_BLOCK = 0x800;\n    this.UARTDEV_BUF_NO_USB = 3;\n    this.UARTDEV_BUF_NO = 0x3fcef14c;\n    this.TEXT_START = ESP32H2_STUB.text_start;\n    this.ENTRY = ESP32H2_STUB.entry;\n    this.DATA_START = ESP32H2_STUB.data_start;\n    this.ROM_DATA = ESP32H2_STUB.data;\n    this.ROM_TEXT = ESP32H2_STUB.text;\n  }\n  async getChipDescription(loader) {\n    return this.CHIP_NAME;\n  }\n  async getChipFeatures(loader) {\n    return [\"BLE\", \"IEEE802.15.4\"];\n  }\n  async getCrystalFreq(loader) {\n    // ESP32H2 XTAL is fixed to 32MHz\n    return 32;\n  }\n  _d2h(d) {\n    const h = (+d).toString(16);\n    return h.length === 1 ? \"0\" + h : h;\n  }\n  async postConnect(loader) {\n    const bufNo = (await loader.readReg(this.UARTDEV_BUF_NO)) & 0xff;\n    loader.debug(\"In _post_connect \" + bufNo);\n    if (bufNo == this.UARTDEV_BUF_NO_USB) {\n      loader.ESP_RAM_BLOCK = this.USB_RAM_BLOCK;\n    }\n  }\n  async readMac(loader) {\n    let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n    mac0 = mac0 >>> 0;\n    let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n    mac1 = mac1 >>> 0 & 0x0000ffff;\n    const mac = new Uint8Array(6);\n    mac[0] = mac1 >> 8 & 0xff;\n    mac[1] = mac1 & 0xff;\n    mac[2] = mac0 >> 24 & 0xff;\n    mac[3] = mac0 >> 16 & 0xff;\n    mac[4] = mac0 >> 8 & 0xff;\n    mac[5] = mac0 & 0xff;\n    return this._d2h(mac[0]) + \":\" + this._d2h(mac[1]) + \":\" + this._d2h(mac[2]) + \":\" + this._d2h(mac[3]) + \":\" + this._d2h(mac[4]) + \":\" + this._d2h(mac[5]);\n  }\n  getEraseSize(offset, size) {\n    return size;\n  }\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;A","sourceRoot":""}