{"version":3,"file":"8.index.js","sources":["webpack:///./node_modules/esptool-js/lib/targets/esp32s2.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nimport ESP32S2_STUB from \"./stub_flasher/stub_flasher_32s2.json\";\nexport class ESP32S2ROM extends ROM {\n  constructor() {\n    super(...arguments);\n    this.CHIP_NAME = \"ESP32-S2\";\n    this.IMAGE_CHIP_ID = 2;\n    this.MAC_EFUSE_REG = 0x3f41a044;\n    this.EFUSE_BASE = 0x3f41a000;\n    this.UART_CLKDIV_REG = 0x3f400014;\n    this.UART_CLKDIV_MASK = 0xfffff;\n    this.UART_DATE_REG_ADDR = 0x60000078;\n    this.FLASH_WRITE_SIZE = 0x400;\n    this.BOOTLOADER_FLASH_OFFSET = 0x1000;\n    this.FLASH_SIZES = {\n      \"1MB\": 0x00,\n      \"2MB\": 0x10,\n      \"4MB\": 0x20,\n      \"8MB\": 0x30,\n      \"16MB\": 0x40\n    };\n    this.SPI_REG_BASE = 0x3f402000;\n    this.SPI_USR_OFFS = 0x18;\n    this.SPI_USR1_OFFS = 0x1c;\n    this.SPI_USR2_OFFS = 0x20;\n    this.SPI_W0_OFFS = 0x58;\n    this.SPI_MOSI_DLEN_OFFS = 0x24;\n    this.SPI_MISO_DLEN_OFFS = 0x28;\n    this.TEXT_START = ESP32S2_STUB.text_start;\n    this.ENTRY = ESP32S2_STUB.entry;\n    this.DATA_START = ESP32S2_STUB.data_start;\n    this.ROM_DATA = ESP32S2_STUB.data;\n    this.ROM_TEXT = ESP32S2_STUB.text;\n  }\n  async getPkgVersion(loader) {\n    const numWord = 3;\n    const block1Addr = this.EFUSE_BASE + 0x044;\n    const addr = block1Addr + 4 * numWord;\n    const word3 = await loader.readReg(addr);\n    const pkgVersion = word3 >> 21 & 0x0f;\n    return pkgVersion;\n  }\n  async getChipDescription(loader) {\n    const chipDesc = [\"ESP32-S2\", \"ESP32-S2FH16\", \"ESP32-S2FH32\"];\n    const pkgVer = await this.getPkgVersion(loader);\n    if (pkgVer >= 0 && pkgVer <= 2) {\n      return chipDesc[pkgVer];\n    } else {\n      return \"unknown ESP32-S2\";\n    }\n  }\n  async getFlashCap(loader) {\n    const numWord = 3;\n    const block1Addr = this.EFUSE_BASE + 0x044;\n    const addr = block1Addr + 4 * numWord;\n    const registerValue = await loader.readReg(addr);\n    const flashCap = registerValue >> 21 & 0x0f;\n    return flashCap;\n  }\n  async getPsramCap(loader) {\n    const numWord = 3;\n    const block1Addr = this.EFUSE_BASE + 0x044;\n    const addr = block1Addr + 4 * numWord;\n    const registerValue = await loader.readReg(addr);\n    const psramCap = registerValue >> 28 & 0x0f;\n    return psramCap;\n  }\n  async getBlock2Version(loader) {\n    const numWord = 4;\n    const block2Addr = this.EFUSE_BASE + 0x05c;\n    const addr = block2Addr + 4 * numWord;\n    const registerValue = await loader.readReg(addr);\n    const block2Ver = registerValue >> 4 & 0x07;\n    return block2Ver;\n  }\n  async getChipFeatures(loader) {\n    const features = [\"Wi-Fi\"];\n    const flashMap = {\n      0: \"No Embedded Flash\",\n      1: \"Embedded Flash 2MB\",\n      2: \"Embedded Flash 4MB\"\n    };\n    const flashCap = await this.getFlashCap(loader);\n    const flashDescription = flashMap[flashCap] || \"Unknown Embedded Flash\";\n    features.push(flashDescription);\n    const psramMap = {\n      0: \"No Embedded Flash\",\n      1: \"Embedded PSRAM 2MB\",\n      2: \"Embedded PSRAM 4MB\"\n    };\n    const psramCap = await this.getPsramCap(loader);\n    const psramDescription = psramMap[psramCap] || \"Unknown Embedded PSRAM\";\n    features.push(psramDescription);\n    const block2VersionMap = {\n      0: \"No calibration in BLK2 of efuse\",\n      1: \"ADC and temperature sensor calibration in BLK2 of efuse V1\",\n      2: \"ADC and temperature sensor calibration in BLK2 of efuse V2\"\n    };\n    const block2Ver = await this.getBlock2Version(loader);\n    const block2VersionDescription = block2VersionMap[block2Ver] || \"Unknown Calibration in BLK2\";\n    features.push(block2VersionDescription);\n    return features;\n  }\n  async getCrystalFreq(loader) {\n    return 40;\n  }\n  _d2h(d) {\n    const h = (+d).toString(16);\n    return h.length === 1 ? \"0\" + h : h;\n  }\n  async readMac(loader) {\n    let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n    mac0 = mac0 >>> 0;\n    let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n    mac1 = mac1 >>> 0 & 0x0000ffff;\n    const mac = new Uint8Array(6);\n    mac[0] = mac1 >> 8 & 0xff;\n    mac[1] = mac1 & 0xff;\n    mac[2] = mac0 >> 24 & 0xff;\n    mac[3] = mac0 >> 16 & 0xff;\n    mac[4] = mac0 >> 8 & 0xff;\n    mac[5] = mac0 & 0xff;\n    return this._d2h(mac[0]) + \":\" + this._d2h(mac[1]) + \":\" + this._d2h(mac[2]) + \":\" + this._d2h(mac[3]) + \":\" + this._d2h(mac[4]) + \":\" + this._d2h(mac[5]);\n  }\n  getEraseSize(offset, size) {\n    return size;\n  }\n}"],"mappingssourceRoot":""}