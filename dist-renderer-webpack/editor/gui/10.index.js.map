{"version":3,"file":"10.index.js","sources":["webpack:///./node_modules/esptool-js/lib/targets/esp8266.js"],"sourcesContent":["import { ROM } from \"./rom.js\";\nimport ESP8266_STUB from \"./stub_flasher/stub_flasher_8266.json\";\nexport class ESP8266ROM extends ROM {\n  constructor() {\n    super(...arguments);\n    this.CHIP_NAME = \"ESP8266\";\n    this.CHIP_DETECT_MAGIC_VALUE = [0xfff0c101];\n    this.EFUSE_RD_REG_BASE = 0x3ff00050;\n    this.UART_CLKDIV_REG = 0x60000014;\n    this.UART_CLKDIV_MASK = 0xfffff;\n    this.XTAL_CLK_DIVIDER = 2;\n    this.FLASH_WRITE_SIZE = 0x4000;\n    // NOT IMPLEMENTED, SETTING EMPTY VALUE\n    this.BOOTLOADER_FLASH_OFFSET = 0;\n    this.UART_DATE_REG_ADDR = 0;\n    this.FLASH_SIZES = {\n      \"512KB\": 0x00,\n      \"256KB\": 0x10,\n      \"1MB\": 0x20,\n      \"2MB\": 0x30,\n      \"4MB\": 0x40,\n      \"2MB-c1\": 0x50,\n      \"4MB-c1\": 0x60,\n      \"8MB\": 0x80,\n      \"16MB\": 0x90\n    };\n    this.SPI_REG_BASE = 0x60000200;\n    this.SPI_USR_OFFS = 0x1c;\n    this.SPI_USR1_OFFS = 0x20;\n    this.SPI_USR2_OFFS = 0x24;\n    this.SPI_MOSI_DLEN_OFFS = 0; // not in esp8266\n    this.SPI_MISO_DLEN_OFFS = 0; // not in esp8266\n    this.SPI_W0_OFFS = 0x40;\n    this.TEXT_START = ESP8266_STUB.text_start;\n    this.ENTRY = ESP8266_STUB.entry;\n    this.DATA_START = ESP8266_STUB.data_start;\n    this.ROM_DATA = ESP8266_STUB.data;\n    this.ROM_TEXT = ESP8266_STUB.text;\n    this.getChipFeatures = async loader => {\n      const features = [\"WiFi\"];\n      if ((await this.getChipDescription(loader)) == \"ESP8285\") features.push(\"Embedded Flash\");\n      return features;\n    };\n  }\n  async readEfuse(loader, offset) {\n    const addr = this.EFUSE_RD_REG_BASE + 4 * offset;\n    loader.debug(\"Read efuse \" + addr);\n    return await loader.readReg(addr);\n  }\n  async getChipDescription(loader) {\n    const efuse3 = await this.readEfuse(loader, 2);\n    const efuse0 = await this.readEfuse(loader, 0);\n    const is8285 = (efuse0 & 1 << 4 | efuse3 & 1 << 16) != 0; // One or the other efuse bit is set for ESP8285\n    return is8285 ? \"ESP8285\" : \"ESP8266EX\";\n  }\n  async getCrystalFreq(loader) {\n    const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n    const etsXtal = loader.transport.baudrate * uartDiv / 1000000 / this.XTAL_CLK_DIVIDER;\n    let normXtal;\n    if (etsXtal > 33) {\n      normXtal = 40;\n    } else {\n      normXtal = 26;\n    }\n    if (Math.abs(normXtal - etsXtal) > 1) {\n      loader.info(\"WARNING: Detected crystal freq \" + etsXtal + \"MHz is quite different to normalized freq \" + normXtal + \"MHz. Unsupported crystal in use?\");\n    }\n    return normXtal;\n  }\n  _d2h(d) {\n    const h = (+d).toString(16);\n    return h.length === 1 ? \"0\" + h : h;\n  }\n  async readMac(loader) {\n    let mac0 = await this.readEfuse(loader, 0);\n    mac0 = mac0 >>> 0;\n    let mac1 = await this.readEfuse(loader, 1);\n    mac1 = mac1 >>> 0;\n    let mac3 = await this.readEfuse(loader, 3);\n    mac3 = mac3 >>> 0;\n    const mac = new Uint8Array(6);\n    if (mac3 != 0) {\n      mac[0] = mac3 >> 16 & 0xff;\n      mac[1] = mac3 >> 8 & 0xff;\n      mac[2] = mac3 & 0xff;\n    } else if ((mac1 >> 16 & 0xff) == 0) {\n      mac[0] = 0x18;\n      mac[1] = 0xfe;\n      mac[2] = 0x34;\n    } else if ((mac1 >> 16 & 0xff) == 1) {\n      mac[0] = 0xac;\n      mac[1] = 0xd0;\n      mac[2] = 0x74;\n    } else {\n      loader.error(\"Unknown OUI\");\n    }\n    mac[3] = mac1 >> 8 & 0xff;\n    mac[4] = mac1 & 0xff;\n    mac[5] = mac0 >> 24 & 0xff;\n    return this._d2h(mac[0]) + \":\" + this._d2h(mac[1]) + \":\" + this._d2h(mac[2]) + \":\" + this._d2h(mac[3]) + \":\" + this._d2h(mac[4]) + \":\" + this._d2h(mac[5]);\n  }\n  getEraseSize(offset, size) {\n    return size;\n  }\n}"],"mappingssourceRoot":""}