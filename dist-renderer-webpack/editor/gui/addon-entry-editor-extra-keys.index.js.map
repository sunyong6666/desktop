{"version":3,"file":"addon-entry-editor-extra-keys.index.js","sources":["webpack:///./node_modules/scratch-gui/src/addons/addons/editor-extra-keys/_runtime_entry.js","webpack:///./node_modules/scratch-gui/src/addons/addons/editor-extra-keys/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js\n};","export default async function (_ref) {\n  let {\n    addon,\n    msg\n  } = _ref;\n  const ScratchBlocks = await addon.tab.traps.getBlockly();\n  let defaultKeys = null;\n  function appendKeys(keys, enableShiftKeys) {\n    if (!defaultKeys) {\n      defaultKeys = [...keys];\n    }\n    if (!addon.self.disabled) {\n      keys.push(...[[\"-\", \"-\"], [\",\", \",\"], [\".\", \".\"]]);\n      keys.splice(5, 0, [msg(\"enter-key\"), \"enter\"]);\n      if (addon.settings.get(\"experimentalKeys\")) {\n        keys.push(...[[\"`\", \"`\"], [\"=\", \"=\"], [\"[\", \"[\"], [\"]\", \"]\"], [\"\\\\\", \"\\\\\"], [\";\", \";\"], [\"'\", \"'\"], [\"/\", \"/\"]]);\n      }\n      if (enableShiftKeys && addon.settings.get(\"shiftKeys\")) {\n        keys.push(...[[\"!\", \"!\"], [\"@\", \"@\"], [\"#\", \"#\"], [\"$\", \"$\"], [\"%\", \"%\"], [\"^\", \"^\"], [\"&\", \"&\"], [\"*\", \"*\"], [\"(\", \"(\"], [\")\", \")\"], [\"_\", \"_\"], [\"+\", \"+\"], [\"{\", \"{\"], [\"}\", \"}\"], [\"|\", \"|\"], [\":\", \":\"], ['\"', '\"'], [\"?\", \"?\"], [\"<\", \"<\"], [\">\", \">\"], [\"~\", \"~\"]]);\n      }\n      if (addon.settings.get(\"twKeys\")) {\n        keys.push(...[[\"backspace\", \"backspace\"], [\"delete\", \"delete\"], [\"shift\", \"shift\"], [\"caps lock\", \"caps lock\"], [\"scroll lock\", \"scroll lock\"], [\"control\", \"control\"], [\"escape\", \"escape\"], [\"insert\", \"insert\"], [\"home\", \"home\"], [\"end\", \"end\"], [\"page up\", \"page up\"], [\"page down\", \"page down\"]]);\n      }\n    }\n    return keys;\n  }\n  for (const opcode of [\"sensing_keyoptions\", \"event_whenkeypressed\"]) {\n    const block = ScratchBlocks.Blocks[opcode];\n    const originalInit = block.init;\n    block.init = function () {\n      const originalJsonInit = this.jsonInit;\n      this.jsonInit = function (obj) {\n        appendKeys(obj.args0[0].options, opcode === \"event_whenkeypressed\");\n        return originalJsonInit.call(this, obj);\n      };\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return originalInit.call(this, ...args);\n    };\n  }\n  const updateExistingBlocks = () => {\n    const workspace = Blockly.getMainWorkspace();\n    const flyout = workspace && workspace.getFlyout();\n    if (workspace && flyout) {\n      const allBlocks = [...workspace.getAllBlocks(), ...flyout.getWorkspace().getAllBlocks()];\n      for (const block of allBlocks) {\n        if (block.type !== \"event_whenkeypressed\" && block.type !== \"sensing_keyoptions\") {\n          continue;\n        }\n        const input = block.inputList[0];\n        if (!input) {\n          continue;\n        }\n        const field = input.fieldRow.find(i => i && Array.isArray(i.menuGenerator_));\n        if (!field) {\n          continue;\n        }\n        field.menuGenerator_ = appendKeys(defaultKeys ? [...defaultKeys] : field.menuGenerator_, block.type === \"event_whenkeypressed\");\n      }\n    }\n  };\n  updateExistingBlocks();\n  addon.settings.addEventListener(\"change\", updateExistingBlocks);\n  addon.self.addEventListener(\"disabled\", updateExistingBlocks);\n  addon.self.addEventListener(\"reenabled\", updateExistingBlocks);\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}