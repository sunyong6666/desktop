{"version":3,"file":"7.index.js","sources":["webpack:///./node_modules/esptool-js/lib/targets/esp32p4.js"],"sourcesContent":["import { ESP32ROM } from \"./esp32.js\";\nimport ESP32P4_STUB from \"./stub_flasher/stub_flasher_32p4.json\";\nexport class ESP32P4ROM extends ESP32ROM {\n  constructor() {\n    super(...arguments);\n    this.CHIP_NAME = \"ESP32-P4\";\n    this.IMAGE_CHIP_ID = 18;\n    this.IROM_MAP_START = 0x40000000;\n    this.IROM_MAP_END = 0x4c000000;\n    this.DROM_MAP_START = 0x40000000;\n    this.DROM_MAP_END = 0x4c000000;\n    this.BOOTLOADER_FLASH_OFFSET = 0x2000; // First 2 sectors are reserved for FE purposes\n    this.CHIP_DETECT_MAGIC_VALUE = [0x0, 0x0addbad0];\n    this.UART_DATE_REG_ADDR = 0x500ca000 + 0x8c;\n    this.EFUSE_BASE = 0x5012d000;\n    this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\n    this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n    this.SPI_REG_BASE = 0x5008d000; // SPIMEM1\n    this.SPI_USR_OFFS = 0x18;\n    this.SPI_USR1_OFFS = 0x1c;\n    this.SPI_USR2_OFFS = 0x20;\n    this.SPI_MOSI_DLEN_OFFS = 0x24;\n    this.SPI_MISO_DLEN_OFFS = 0x28;\n    this.SPI_W0_OFFS = 0x58;\n    this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\n    this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\n    this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\n    this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\n    this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\n    this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\n    this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\n    this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\n    this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\n    this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\n    this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;\n    this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\n    this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\n    this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\n    this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\n    this.PURPOSE_VAL_XTS_AES256_KEY_1 = 2;\n    this.PURPOSE_VAL_XTS_AES256_KEY_2 = 3;\n    this.PURPOSE_VAL_XTS_AES128_KEY = 4;\n    this.SUPPORTS_ENCRYPTED_FLASH = true;\n    this.FLASH_ENCRYPTED_WRITE_ALIGN = 16;\n    this.MEMORY_MAP = [[0x00000000, 0x00010000, \"PADDING\"], [0x40000000, 0x4c000000, \"DROM\"], [0x4ff00000, 0x4ffa0000, \"DRAM\"], [0x4ff00000, 0x4ffa0000, \"BYTE_ACCESSIBLE\"], [0x4fc00000, 0x4fc20000, \"DROM_MASK\"], [0x4fc00000, 0x4fc20000, \"IROM_MASK\"], [0x40000000, 0x4c000000, \"IROM\"], [0x4ff00000, 0x4ffa0000, \"IRAM\"], [0x50108000, 0x50110000, \"RTC_IRAM\"], [0x50108000, 0x50110000, \"RTC_DRAM\"], [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"]];\n    this.UF2_FAMILY_ID = 0x3d308e94;\n    this.EFUSE_MAX_KEY = 5;\n    this.KEY_PURPOSES = {\n      0: \"USER/EMPTY\",\n      1: \"ECDSA_KEY\",\n      2: \"XTS_AES_256_KEY_1\",\n      3: \"XTS_AES_256_KEY_2\",\n      4: \"XTS_AES_128_KEY\",\n      5: \"HMAC_DOWN_ALL\",\n      6: \"HMAC_DOWN_JTAG\",\n      7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\n      8: \"HMAC_UP\",\n      9: \"SECURE_BOOT_DIGEST0\",\n      10: \"SECURE_BOOT_DIGEST1\",\n      11: \"SECURE_BOOT_DIGEST2\",\n      12: \"KM_INIT_KEY\"\n    };\n    this.TEXT_START = ESP32P4_STUB.text_start;\n    this.ENTRY = ESP32P4_STUB.entry;\n    this.DATA_START = ESP32P4_STUB.data_start;\n    this.ROM_DATA = ESP32P4_STUB.data;\n    this.ROM_TEXT = ESP32P4_STUB.text;\n  }\n  async getPkgVersion(loader) {\n    const numWord = 2;\n    const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n    const registerValue = await loader.readReg(addr);\n    return registerValue >> 27 & 0x07;\n  }\n  async getMinorChipVersion(loader) {\n    const numWord = 2;\n    const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n    const registerValue = await loader.readReg(addr);\n    return registerValue >> 0 & 0x0f;\n  }\n  async getMajorChipVersion(loader) {\n    const numWord = 2;\n    const addr = this.EFUSE_BLOCK1_ADDR + 4 * numWord;\n    const registerValue = await loader.readReg(addr);\n    return registerValue >> 4 & 0x03;\n  }\n  async getChipDescription(loader) {\n    const pkgVersion = await this.getPkgVersion(loader);\n    const chipName = pkgVersion === 0 ? \"ESP32-P4\" : \"unknown ESP32-P4\";\n    const majorRev = await this.getMajorChipVersion(loader);\n    const minorRev = await this.getMinorChipVersion(loader);\n    return \"\".concat(chipName, \" (revision v\").concat(majorRev, \".\").concat(minorRev, \")\");\n  }\n  async getChipFeatures(loader) {\n    return [\"High-Performance MCU\"];\n  }\n  async getCrystalFreq(loader) {\n    return 40; // ESP32P4 XTAL is fixed to 40MHz\n  }\n  async getFlashVoltage(loader) {\n    return;\n  }\n  async overrideVddsdio(loader) {\n    loader.debug(\"VDD_SDIO overrides are not supported for ESP32-P4\");\n  }\n  async readMac(loader) {\n    let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n    mac0 = mac0 >>> 0;\n    let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n    mac1 = mac1 >>> 0 & 0x0000ffff;\n    const mac = new Uint8Array(6);\n    mac[0] = mac1 >> 8 & 0xff;\n    mac[1] = mac1 & 0xff;\n    mac[2] = mac0 >> 24 & 0xff;\n    mac[3] = mac0 >> 16 & 0xff;\n    mac[4] = mac0 >> 8 & 0xff;\n    mac[5] = mac0 & 0xff;\n    return this._d2h(mac[0]) + \":\" + this._d2h(mac[1]) + \":\" + this._d2h(mac[2]) + \":\" + this._d2h(mac[3]) + \":\" + this._d2h(mac[4]) + \":\" + this._d2h(mac[5]);\n  }\n  async getFlashCryptConfig(loader) {\n    return; // doesn't exist on ESP32-P4\n  }\n  async getSecureBootEnabled(laoder) {\n    const registerValue = await laoder.readReg(this.EFUSE_SECURE_BOOT_EN_REG);\n    return registerValue & this.EFUSE_SECURE_BOOT_EN_MASK;\n  }\n  async getKeyBlockPurpose(loader, keyBlock) {\n    if (keyBlock < 0 || keyBlock > this.EFUSE_MAX_KEY) {\n      loader.debug(\"Valid key block numbers must be in range 0-\".concat(this.EFUSE_MAX_KEY));\n      return;\n    }\n    const regShiftDictionary = [[this.EFUSE_PURPOSE_KEY0_REG, this.EFUSE_PURPOSE_KEY0_SHIFT], [this.EFUSE_PURPOSE_KEY1_REG, this.EFUSE_PURPOSE_KEY1_SHIFT], [this.EFUSE_PURPOSE_KEY2_REG, this.EFUSE_PURPOSE_KEY2_SHIFT], [this.EFUSE_PURPOSE_KEY3_REG, this.EFUSE_PURPOSE_KEY3_SHIFT], [this.EFUSE_PURPOSE_KEY4_REG, this.EFUSE_PURPOSE_KEY4_SHIFT], [this.EFUSE_PURPOSE_KEY5_REG, this.EFUSE_PURPOSE_KEY5_SHIFT]];\n    const [reg, shift] = regShiftDictionary[keyBlock];\n    const registerValue = await loader.readReg(reg);\n    return registerValue >> shift & 0xf;\n  }\n  async isFlashEncryptionKeyValid(loader) {\n    const purposes = [];\n    for (let i = 0; i <= this.EFUSE_MAX_KEY; i++) {\n      const purpose = await this.getKeyBlockPurpose(loader, i);\n      purposes.push(purpose);\n    }\n    const isXtsAes128Key = purposes.find(p => p === this.PURPOSE_VAL_XTS_AES128_KEY);\n    if (typeof isXtsAes128Key !== undefined) {\n      return true;\n    }\n    const isXtsAes256Key1 = purposes.find(p => p === this.PURPOSE_VAL_XTS_AES256_KEY_1);\n    const isXtsAes256Key2 = purposes.find(p => p === this.PURPOSE_VAL_XTS_AES256_KEY_2);\n    if (typeof isXtsAes256Key1 !== undefined && typeof isXtsAes256Key2 !== undefined) {\n      return true;\n    }\n    return false;\n  }\n}"],"mappingssourceRoot":""}