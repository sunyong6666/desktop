{"version":3,"file":"addon-entry-custom-block-shape.index.js","sources":["webpack:///./node_modules/scratch-gui/src/addons/addons/custom-block-shape/_runtime_entry.js","webpack:///./node_modules/scratch-gui/src/addons/addons/custom-block-shape/update-all-blocks.js","webpack:///./node_modules/scratch-gui/src/addons/addons/custom-block-shape/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js\n};","export function updateAllBlocks(vm, workspace, blockly) {\n  const eventsOriginallyEnabled = blockly.Events.isEnabled();\n  blockly.Events.disable(); // Clears workspace right-clickâ†’undo (see SA/SA#6691)\n\n  if (workspace) {\n    if (vm.editingTarget) {\n      vm.emitWorkspaceUpdate();\n    }\n    const flyout = workspace.getFlyout();\n    if (flyout) {\n      const flyoutWorkspace = flyout.getWorkspace();\n      window.Blockly.Xml.clearWorkspaceAndLoadFromXml(window.Blockly.Xml.workspaceToDom(flyoutWorkspace), flyoutWorkspace);\n      workspace.getToolbox().refreshSelection();\n      workspace.toolboxRefreshEnabled_ = true;\n    }\n  }\n\n  // There's no particular reason for checking whether events were originally enabled.\n  // Unconditionally enabling events at this point could, in theory, cause bugs in the future.\n  if (eventsOriginallyEnabled) blockly.Events.enable(); // Re-enable events\n}","import { updateAllBlocks } from \"./update-all-blocks.js\";\nexport default async function (_ref) {\n  let {\n    addon,\n    console\n  } = _ref;\n  var BlocklyInstance = await addon.tab.traps.getBlockly();\n  (function (Blockly) {\n    const BlockSvg = BlocklyInstance.BlockSvg;\n    var originalDropdownObject = BlocklyInstance.FieldDropdown.prototype.positionArrow;\n    var vm = addon.tab.traps.vm;\n    const {\n      GRID_UNIT\n    } = BlockSvg;\n    function applyChanges() {\n      let paddingSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : addon.settings.get(\"paddingSize\");\n      let cornerSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : addon.settings.get(\"cornerSize\");\n      let notchSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : addon.settings.get(\"notchSize\");\n      let multiplier = paddingSize / 100;\n      cornerSize = cornerSize / 100;\n      notchSize = notchSize / 100;\n      BlockSvg.SEP_SPACE_Y = 2 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_BLOCK_X = 16 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_BLOCK_X_OUTPUT = 12 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_BLOCK_X_SHADOW_OUTPUT = 10 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_BLOCK_Y = 12 * GRID_UNIT * multiplier;\n      BlockSvg.EXTRA_STATEMENT_ROW_Y = 8 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_BLOCK_X_WITH_STATEMENT = 40 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_BLOCK_Y_SINGLE_FIELD_OUTPUT = 8 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_BLOCK_Y_REPORTER = 10 * GRID_UNIT * multiplier;\n      BlockSvg.MIN_STATEMENT_INPUT_HEIGHT = 6 * GRID_UNIT * multiplier;\n      BlockSvg.NOTCH_WIDTH = 8 * GRID_UNIT * multiplier;\n      BlockSvg.NOTCH_HEIGHT = 2 * GRID_UNIT * multiplier * notchSize;\n      BlockSvg.NOTCH_START_PADDING = 3 * GRID_UNIT; //* multiplier\n      BlockSvg.ICON_SEPARATOR_HEIGHT = 10 * GRID_UNIT * multiplier;\n      BlockSvg.NOTCH_PATH_LEFT = \"c 2,0 3,\" + 1 * notchSize + \" 4,\" + 2 * notchSize + \" l \" + 4 * multiplier * notchSize + \",\" + 4 * multiplier * notchSize + \" c 1,\" + 1 * notchSize + \" 2,\" + 2 * notchSize + \" 4,\" + 2 * notchSize + \" h \" + 24 * (multiplier - 0.5) + \" c 2,0 3,-\" + 1 * notchSize + \" 4,-\" + 2 * notchSize + \" l \" + 4 * multiplier * notchSize + \",\" + -4 * multiplier * notchSize + \"c 1,-\" + 1 * notchSize + \" 2,-\" + 2 * notchSize + \" 4,-\" + 2 * notchSize;\n      BlockSvg.NOTCH_PATH_RIGHT = \"h \" + (-4 * (cornerSize - 1) - 5 * (1 - notchSize)) + \"c -2,0 -3,\" + 1 * notchSize + \" -4,\" + 2 * notchSize + \" l \" + -4 * multiplier * notchSize + \",\" + 4 * multiplier * notchSize + \" c -1,\" + 1 * notchSize + \" -2,\" + 2 * notchSize + \" -4,\" + 2 * notchSize + \" h \" + -24 * (multiplier - 0.5) + \" c -2,0 -3,-\" + 1 * notchSize + \" -4,-\" + 2 * notchSize + \" l \" + -4 * multiplier * notchSize + \",\" + -4 * multiplier * notchSize + \"c -1,-\" + 1 * notchSize + \" -2,-\" + 2 * notchSize + \" -4,-\" + 2 * notchSize;\n      BlockSvg.INPUT_SHAPE_HEXAGONAL = \"M \" + 4 * GRID_UNIT * multiplier + \",0 \" + \" h \" + 4 * GRID_UNIT + \" l \" + 4 * GRID_UNIT * multiplier + \",\" + 4 * GRID_UNIT * multiplier + \" l \" + -4 * GRID_UNIT * multiplier + \",\" + 4 * GRID_UNIT * multiplier + \" h \" + -4 * GRID_UNIT + \" l \" + -4 * GRID_UNIT * multiplier + \",\" + -4 * GRID_UNIT * multiplier + \" l \" + 4 * GRID_UNIT * multiplier + \",\" + -4 * GRID_UNIT * multiplier + \" z\";\n      BlockSvg.INPUT_SHAPE_HEXAGONAL_WIDTH = 12 * GRID_UNIT * multiplier;\n      BlockSvg.INPUT_SHAPE_ROUND = \"M \" + 4 * GRID_UNIT * multiplier + \",0\" + \" h \" + 4 * GRID_UNIT * multiplier + \" a \" + 4 * GRID_UNIT * multiplier + \" \" + 4 * GRID_UNIT * multiplier + \" 0 0 1 0 \" + 8 * GRID_UNIT * multiplier + \" h \" + -4 * GRID_UNIT * multiplier + \" a \" + 4 * GRID_UNIT * multiplier + \" \" + 4 * GRID_UNIT * multiplier + \" 0 0 1 0 -\" + 8 * GRID_UNIT * multiplier + \" z\";\n      BlockSvg.INPUT_SHAPE_ROUND_WIDTH = 12 * GRID_UNIT * multiplier;\n      BlockSvg.INPUT_SHAPE_HEIGHT = 8 * GRID_UNIT * multiplier;\n      BlockSvg.FIELD_HEIGHT = 8 * GRID_UNIT * multiplier; // NOTE: Determines string input heights\n      BlockSvg.FIELD_WIDTH = 6 * GRID_UNIT * Math.min(multiplier, 1) + 10 * GRID_UNIT * Math.max(multiplier - 1, 0);\n      BlockSvg.FIELD_DEFAULT_CORNER_RADIUS = 4 * GRID_UNIT * multiplier;\n      BlockSvg.EDITABLE_FIELD_PADDING = 1.5 * GRID_UNIT * multiplier;\n      BlockSvg.BOX_FIELD_PADDING = 2 * GRID_UNIT * multiplier;\n      BlockSvg.DROPDOWN_ARROW_PADDING = 2 * GRID_UNIT * multiplier;\n      BlockSvg.FIELD_WIDTH_MIN_EDIT = 8 * GRID_UNIT * multiplier;\n      BlockSvg.INPUT_AND_FIELD_MIN_X = 12 * GRID_UNIT * multiplier;\n      BlockSvg.INLINE_PADDING_Y = 1 * GRID_UNIT * multiplier; // For when reporters are inside reporters\n      BlockSvg.SHAPE_IN_SHAPE_PADDING[1][0] = 5 * GRID_UNIT * multiplier;\n      BlockSvg.SHAPE_IN_SHAPE_PADDING[1][2] = 5 * GRID_UNIT * multiplier;\n      BlockSvg.SHAPE_IN_SHAPE_PADDING[1][3] = 5 * GRID_UNIT * multiplier;\n      BlocklyInstance.FieldDropdown.prototype.positionArrow = function (x) {\n        const arrowHeight = 12;\n        this.arrowY_ = (BlockSvg.FIELD_HEIGHT - arrowHeight) / 2 + 1;\n        return originalDropdownObject.call(this, x);\n      };\n\n      // Corner setting\n      BlockSvg.CORNER_RADIUS = 1 * GRID_UNIT * cornerSize * 100 / 100;\n      BlockSvg.TOP_LEFT_CORNER_START = \"m 0,\" + BlockSvg.CORNER_RADIUS;\n      BlockSvg.TOP_LEFT_CORNER = \"A \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS + \" 0 0,1 \" + BlockSvg.CORNER_RADIUS + \",0\";\n      BlockSvg.TOP_RIGHT_CORNER = \"a \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS + \" 0 0,1 \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS;\n      BlockSvg.BOTTOM_RIGHT_CORNER = \" a \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS + \" 0 0,1 -\" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS;\n      BlockSvg.BOTTOM_LEFT_CORNER = \"a \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS + \" 0 0,1 -\" + BlockSvg.CORNER_RADIUS + \",-\" + BlockSvg.CORNER_RADIUS;\n      BlockSvg.INNER_TOP_LEFT_CORNER = \" a \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS + \" 0 0,0 -\" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS;\n      BlockSvg.INNER_BOTTOM_LEFT_CORNER = \"a \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS + \" 0 0,0 \" + BlockSvg.CORNER_RADIUS + \",\" + BlockSvg.CORNER_RADIUS;\n      BlockSvg.TOP_RIGHT_CORNER_DEFINE_HAT = \"a \" + BlockSvg.DEFINE_HAT_CORNER_RADIUS + \",\" + BlockSvg.DEFINE_HAT_CORNER_RADIUS + \" 0 0,1 \" + BlockSvg.DEFINE_HAT_CORNER_RADIUS + \",\" + BlockSvg.DEFINE_HAT_CORNER_RADIUS + \" v \" + (1 * GRID_UNIT - BlockSvg.CORNER_RADIUS);\n      BlockSvg.STATEMENT_INPUT_INNER_SPACE = 2.8 * GRID_UNIT - 0.9 * GRID_UNIT * cornerSize;\n    }\n    function applyAndUpdate() {\n      applyChanges(...arguments);\n      updateAllBlocks(vm, addon.tab.traps.getWorkspace(), BlocklyInstance);\n    }\n    addon.settings.addEventListener(\"change\", () => applyAndUpdate());\n    addon.self.addEventListener(\"disabled\", () => {\n      // Scratch 3.0 blocks\n      applyAndUpdate(100, 100, 100);\n    });\n    addon.self.addEventListener(\"reenabled\", () => applyAndUpdate());\n    applyAndUpdate();\n  })(window.Blockly);\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}