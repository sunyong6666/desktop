{"version":3,"file":"2.index.js","sources":["webpack:///./node_modules/esptool-js/lib/targets/esp32c5.js","webpack:///./node_modules/esptool-js/lib/targets/esp32c6.js"],"sourcesContent":["import { ESP32C6ROM } from \"./esp32c6\";\nimport ESP32C5_STUB from \"./stub_flasher/stub_flasher_32c5.json\";\nexport class ESP32C5ROM extends ESP32C6ROM {\n  constructor() {\n    super(...arguments);\n    this.CHIP_NAME = \"ESP32-C5\";\n    this.IMAGE_CHIP_ID = 23;\n    this.EFUSE_BASE = 0x600b4800;\n    this.EFUSE_BLOCK1_ADDR = this.EFUSE_BASE + 0x044;\n    this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n    this.UART_CLKDIV_REG = 0x60000014;\n    this.TEXT_START = ESP32C5_STUB.text_start;\n    this.ENTRY = ESP32C5_STUB.entry;\n    this.DATA_START = ESP32C5_STUB.data_start;\n    this.ROM_DATA = ESP32C5_STUB.data;\n    this.ROM_TEXT = ESP32C5_STUB.text;\n    this.EFUSE_RD_REG_BASE = this.EFUSE_BASE + 0x030; // BLOCK0 read base address\n    this.EFUSE_PURPOSE_KEY0_REG = this.EFUSE_BASE + 0x34;\n    this.EFUSE_PURPOSE_KEY0_SHIFT = 24;\n    this.EFUSE_PURPOSE_KEY1_REG = this.EFUSE_BASE + 0x34;\n    this.EFUSE_PURPOSE_KEY1_SHIFT = 28;\n    this.EFUSE_PURPOSE_KEY2_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY2_SHIFT = 0;\n    this.EFUSE_PURPOSE_KEY3_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY3_SHIFT = 4;\n    this.EFUSE_PURPOSE_KEY4_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY4_SHIFT = 8;\n    this.EFUSE_PURPOSE_KEY5_REG = this.EFUSE_BASE + 0x38;\n    this.EFUSE_PURPOSE_KEY5_SHIFT = 12;\n    this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT_REG = this.EFUSE_RD_REG_BASE;\n    this.EFUSE_DIS_DOWNLOAD_MANUAL_ENCRYPT = 1 << 20;\n    this.EFUSE_SPI_BOOT_CRYPT_CNT_REG = this.EFUSE_BASE + 0x034;\n    this.EFUSE_SPI_BOOT_CRYPT_CNT_MASK = 0x7 << 18;\n    this.EFUSE_SECURE_BOOT_EN_REG = this.EFUSE_BASE + 0x038;\n    this.EFUSE_SECURE_BOOT_EN_MASK = 1 << 20;\n    this.IROM_MAP_START = 0x42000000;\n    this.IROM_MAP_END = 0x42800000;\n    this.DROM_MAP_START = 0x42800000;\n    this.DROM_MAP_END = 0x43000000;\n    this.PCR_SYSCLK_CONF_REG = 0x60096110;\n    this.PCR_SYSCLK_XTAL_FREQ_V = 0x7f << 24;\n    this.PCR_SYSCLK_XTAL_FREQ_S = 24;\n    this.XTAL_CLK_DIVIDER = 1;\n    this.UARTDEV_BUF_NO = 0x4085f51c; // Variable in ROM .bss which indicates the port in use\n    // Magic value for ESP32C5\n    this.CHIP_DETECT_MAGIC_VALUE = [0x1101406f];\n    this.FLASH_FREQUENCY = {\n      \"80m\": 0xf,\n      \"40m\": 0x0,\n      \"20m\": 0x2\n    };\n    this.MEMORY_MAP = [[0x00000000, 0x00010000, \"PADDING\"], [0x42800000, 0x43000000, \"DROM\"], [0x40800000, 0x40860000, \"DRAM\"], [0x40800000, 0x40860000, \"BYTE_ACCESSIBLE\"], [0x4003a000, 0x40040000, \"DROM_MASK\"], [0x40000000, 0x4003a000, \"IROM_MASK\"], [0x42000000, 0x42800000, \"IROM\"], [0x40800000, 0x40860000, \"IRAM\"], [0x50000000, 0x50004000, \"RTC_IRAM\"], [0x50000000, 0x50004000, \"RTC_DRAM\"], [0x600fe000, 0x60100000, \"MEM_INTERNAL2\"]];\n    this.UF2_FAMILY_ID = 0xf71c0343;\n    this.EFUSE_MAX_KEY = 5;\n    this.KEY_PURPOSES = {\n      0: \"USER/EMPTY\",\n      1: \"ECDSA_KEY\",\n      2: \"XTS_AES_256_KEY_1\",\n      3: \"XTS_AES_256_KEY_2\",\n      4: \"XTS_AES_128_KEY\",\n      5: \"HMAC_DOWN_ALL\",\n      6: \"HMAC_DOWN_JTAG\",\n      7: \"HMAC_DOWN_DIGITAL_SIGNATURE\",\n      8: \"HMAC_UP\",\n      9: \"SECURE_BOOT_DIGEST0\",\n      10: \"SECURE_BOOT_DIGEST1\",\n      11: \"SECURE_BOOT_DIGEST2\",\n      12: \"KM_INIT_KEY\"\n    };\n  }\n  async getPkgVersion(loader) {\n    const numWord = 2;\n    return (await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 26 & 0x07;\n  }\n  async getMinorChipVersion(loader) {\n    const numWord = 2;\n    return (await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 0 & 0x0f;\n  }\n  async getMajorChipVersion(loader) {\n    const numWord = 2;\n    return (await loader.readReg(this.EFUSE_BLOCK1_ADDR + 4 * numWord)) >> 4 & 0x03;\n  }\n  async getChipDescription(loader) {\n    const pkgVer = await this.getPkgVersion(loader);\n    let desc;\n    if (pkgVer === 0) {\n      desc = \"ESP32-C5\";\n    } else {\n      desc = \"unknown ESP32-C5\";\n    }\n    const majorRev = await this.getMajorChipVersion(loader);\n    const minorRev = await this.getMinorChipVersion(loader);\n    return \"\".concat(desc, \" (revision v\").concat(majorRev, \".\").concat(minorRev, \")\");\n  }\n  async getCrystalFreq(loader) {\n    // The crystal detection algorithm of ESP32/ESP8266\n    // works for ESP32-C5 as well.\n    const uartDiv = (await loader.readReg(this.UART_CLKDIV_REG)) & this.UART_CLKDIV_MASK;\n    const etsXtal = loader.transport.baudrate * uartDiv / 1000000 / this.XTAL_CLK_DIVIDER;\n    let normXtal;\n    if (etsXtal > 45) {\n      normXtal = 48;\n    } else if (etsXtal > 33) {\n      normXtal = 40;\n    } else {\n      normXtal = 26;\n    }\n    if (Math.abs(normXtal - etsXtal) > 1) {\n      loader.info(\"WARNING: Unsupported crystal in use\");\n    }\n    return normXtal;\n  }\n  async getCrystalFreqRomExpect(loader) {\n    return ((await loader.readReg(this.PCR_SYSCLK_CONF_REG)) & this.PCR_SYSCLK_XTAL_FREQ_V) >> this.PCR_SYSCLK_XTAL_FREQ_S;\n  }\n}","import { ROM } from \"./rom.js\";\nimport ESP32C6_STUB from \"./stub_flasher/stub_flasher_32c6.json\";\nexport class ESP32C6ROM extends ROM {\n  constructor() {\n    super(...arguments);\n    this.CHIP_NAME = \"ESP32-C6\";\n    this.IMAGE_CHIP_ID = 13;\n    this.EFUSE_BASE = 0x600b0800;\n    this.MAC_EFUSE_REG = this.EFUSE_BASE + 0x044;\n    this.UART_CLKDIV_REG = 0x3ff40014;\n    this.UART_CLKDIV_MASK = 0xfffff;\n    this.UART_DATE_REG_ADDR = 0x6000007c;\n    this.FLASH_WRITE_SIZE = 0x400;\n    this.BOOTLOADER_FLASH_OFFSET = 0;\n    this.FLASH_SIZES = {\n      \"1MB\": 0x00,\n      \"2MB\": 0x10,\n      \"4MB\": 0x20,\n      \"8MB\": 0x30,\n      \"16MB\": 0x40\n    };\n    this.SPI_REG_BASE = 0x60002000;\n    this.SPI_USR_OFFS = 0x18;\n    this.SPI_USR1_OFFS = 0x1c;\n    this.SPI_USR2_OFFS = 0x20;\n    this.SPI_MOSI_DLEN_OFFS = 0x24;\n    this.SPI_MISO_DLEN_OFFS = 0x28;\n    this.SPI_W0_OFFS = 0x58;\n    this.TEXT_START = ESP32C6_STUB.text_start;\n    this.ENTRY = ESP32C6_STUB.entry;\n    this.DATA_START = ESP32C6_STUB.data_start;\n    this.ROM_DATA = ESP32C6_STUB.data;\n    this.ROM_TEXT = ESP32C6_STUB.text;\n  }\n  async getPkgVersion(loader) {\n    const numWord = 3;\n    const block1Addr = this.EFUSE_BASE + 0x044;\n    const addr = block1Addr + 4 * numWord;\n    const word3 = await loader.readReg(addr);\n    const pkgVersion = word3 >> 21 & 0x07;\n    return pkgVersion;\n  }\n  async getChipRevision(loader) {\n    const block1Addr = this.EFUSE_BASE + 0x044;\n    const numWord = 3;\n    const pos = 18;\n    const addr = block1Addr + 4 * numWord;\n    const ret = ((await loader.readReg(addr)) & 0x7 << pos) >> pos;\n    return ret;\n  }\n  async getChipDescription(loader) {\n    let desc;\n    const pkgVer = await this.getPkgVersion(loader);\n    if (pkgVer === 0) {\n      desc = \"ESP32-C6\";\n    } else {\n      desc = \"unknown ESP32-C6\";\n    }\n    const chipRev = await this.getChipRevision(loader);\n    desc += \" (revision \" + chipRev + \")\";\n    return desc;\n  }\n  async getChipFeatures(loader) {\n    return [\"Wi-Fi 6\", \"BT 5\", \"IEEE802.15.4\"];\n  }\n  async getCrystalFreq(loader) {\n    return 40;\n  }\n  _d2h(d) {\n    const h = (+d).toString(16);\n    return h.length === 1 ? \"0\" + h : h;\n  }\n  async readMac(loader) {\n    let mac0 = await loader.readReg(this.MAC_EFUSE_REG);\n    mac0 = mac0 >>> 0;\n    let mac1 = await loader.readReg(this.MAC_EFUSE_REG + 4);\n    mac1 = mac1 >>> 0 & 0x0000ffff;\n    const mac = new Uint8Array(6);\n    mac[0] = mac1 >> 8 & 0xff;\n    mac[1] = mac1 & 0xff;\n    mac[2] = mac0 >> 24 & 0xff;\n    mac[3] = mac0 >> 16 & 0xff;\n    mac[4] = mac0 >> 8 & 0xff;\n    mac[5] = mac0 & 0xff;\n    return this._d2h(mac[0]) + \":\" + this._d2h(mac[1]) + \":\" + this._d2h(mac[2]) + \":\" + this._d2h(mac[3]) + \":\" + this._d2h(mac[4]) + \":\" + this._d2h(mac[5]);\n  }\n  getEraseSize(offset, size) {\n    return size;\n  }\n}"],"mappingsnsourceRoot":""}