{"version":3,"file":"addon-entry-editor-stepping.index.js","sources":["webpack:///./node_modules/scratch-gui/src/addons/addons/editor-stepping/_runtime_entry.js","webpack:///./node_modules/scratch-gui/src/addons/addons/editor-stepping/highlighter.js","webpack:///./node_modules/scratch-gui/src/addons/addons/editor-stepping/userscript.js"],"sourcesContent":["/* generated by pull.js */\nimport _js from \"./userscript.js\";\nexport const resources = {\n  \"userscript.js\": _js\n};","const SVG_NS = \"http://www.w3.org/2000/svg\";\nconst containerSvg = document.createElementNS(SVG_NS, \"svg\");\n// unfortunately we can't use display: none on this as that breaks filters\ncontainerSvg.style.position = \"fixed\";\ncontainerSvg.style.top = \"-999999px\";\ncontainerSvg.style.width = \"0\";\ncontainerSvg.style.height = \"0\";\ndocument.body.appendChild(containerSvg);\nlet nextGlowerId = 0;\nconst highlightsPerElement = new WeakMap();\nconst getHighlightersForElement = element => {\n  if (!highlightsPerElement.get(element)) {\n    highlightsPerElement.set(element, new Set());\n  }\n  return highlightsPerElement.get(element);\n};\nconst updateHighlight = (element, highlighters) => {\n  let result;\n  for (const i of highlighters) {\n    if (!result || i.priority > result.priority) {\n      result = i;\n    }\n  }\n  if (result) {\n    element.style.filter = result.filter;\n  } else {\n    element.style.filter = \"\";\n  }\n};\nconst addHighlight = (element, highlighter) => {\n  const highlighters = getHighlightersForElement(element);\n  highlighters.add(highlighter);\n  updateHighlight(element, highlighters);\n};\nconst removeHighlight = (element, highlighter) => {\n  const highlighters = getHighlightersForElement(element);\n  highlighters.delete(highlighter);\n  updateHighlight(element, highlighters);\n};\nclass Highlighter {\n  constructor(priority, color) {\n    this.priority = priority;\n    const id = \"sa_glower_filter\".concat(nextGlowerId++);\n    this.filter = \"url(\\\"#\".concat(id, \"\\\")\");\n    this.previousElements = new Set();\n    const filterElement = document.createElementNS(SVG_NS, \"filter\");\n    filterElement.id = id;\n    filterElement.setAttribute(\"width\", \"180%\");\n    filterElement.setAttribute(\"height\", \"160%\");\n    filterElement.setAttribute(\"x\", \"-40%\");\n    filterElement.setAttribute(\"y\", \"-30%\");\n    const filterBlur = document.createElementNS(SVG_NS, \"feGaussianBlur\");\n    filterBlur.setAttribute(\"in\", \"SourceGraphic\");\n    filterBlur.setAttribute(\"stdDeviation\", \"4\");\n    filterElement.appendChild(filterBlur);\n    const filterTransfer = document.createElementNS(SVG_NS, \"feComponentTransfer\");\n    filterTransfer.setAttribute(\"result\", \"outBlur\");\n    filterElement.appendChild(filterTransfer);\n    const filterTransferTable = document.createElementNS(SVG_NS, \"feFuncA\");\n    filterTransferTable.setAttribute(\"type\", \"table\");\n    filterTransferTable.setAttribute(\"tableValues\", \"0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\");\n    filterTransfer.appendChild(filterTransferTable);\n    const filterFlood = document.createElementNS(SVG_NS, \"feFlood\");\n    filterFlood.setAttribute(\"flood-opacity\", \"1\");\n    filterFlood.setAttribute(\"result\", \"outColor\");\n    filterElement.appendChild(filterFlood);\n    this.filterFlood = filterFlood;\n    const filterComposite = document.createElementNS(SVG_NS, \"feComposite\");\n    filterComposite.setAttribute(\"in\", \"outColor\");\n    filterComposite.setAttribute(\"in2\", \"outBlur\");\n    filterComposite.setAttribute(\"operator\", \"in\");\n    filterComposite.setAttribute(\"result\", \"outGlow\");\n    filterElement.appendChild(filterComposite);\n    const filterFinalComposite = document.createElementNS(SVG_NS, \"feComposite\");\n    filterFinalComposite.setAttribute(\"in\", \"SourceGraphic\");\n    filterFinalComposite.setAttribute(\"in2\", \"outGlow\");\n    filterFinalComposite.setAttribute(\"operator\", \"over\");\n    filterElement.appendChild(filterFinalComposite);\n    containerSvg.appendChild(filterElement);\n    this.setColor(color);\n  }\n  setColor(color) {\n    this.filterFlood.setAttribute(\"flood-color\", color);\n  }\n  setGlowingThreads(threads) {\n    const elementsToHighlight = new Set();\n    const workspace = Blockly.getMainWorkspace();\n    if (workspace) {\n      for (const thread of threads) {\n        thread.stack.forEach(blockId => {\n          const block = workspace.getBlockById(blockId);\n          if (!block) {\n            return;\n          }\n          const childblock = thread.stack.find(i => {\n            let b = block;\n            while (b.childBlocks_.length) {\n              b = b.childBlocks_[b.childBlocks_.length - 1];\n              if (i === b.id) return true;\n            }\n            return false;\n          });\n          if (!childblock && block.svgPath_) {\n            const svgPath = block.svgPath_;\n            elementsToHighlight.add(svgPath);\n          }\n        });\n      }\n    }\n    for (const element of this.previousElements) {\n      if (!elementsToHighlight.has(element)) {\n        removeHighlight(element, this);\n      }\n    }\n    for (const element of elementsToHighlight) {\n      if (!this.previousElements.has(element)) {\n        addHighlight(element, this);\n      }\n    }\n    this.previousElements = elementsToHighlight;\n  }\n}\nexport default Highlighter;","import { getRunningThread } from \"../debugger/module.js\";\nimport Highlighter from \"./highlighter.js\";\nexport default async function (_ref) {\n  let {\n    addon,\n    console\n  } = _ref;\n  const vm = addon.tab.traps.vm;\n  const highlighter = new Highlighter(0, addon.settings.get(\"highlight-color\"));\n  addon.settings.addEventListener(\"change\", () => {\n    highlighter.setColor(addon.settings.get(\"highlight-color\"));\n  });\n  addon.self.addEventListener(\"disabled\", () => {\n    highlighter.setGlowingThreads([]);\n  });\n  const oldStep = vm.runtime._step;\n  vm.runtime._step = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    oldStep.call(this, ...args);\n    if (!addon.self.disabled) {\n      const runningThread = getRunningThread();\n      const threads = vm.runtime.threads.filter(thread => thread !== runningThread && !thread.target.blocks.forceNoGlow && !thread.isCompiled);\n      highlighter.setGlowingThreads(threads);\n    }\n  };\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}