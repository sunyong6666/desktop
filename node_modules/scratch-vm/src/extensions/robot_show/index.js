const BlockType = require('../../extension-support/block-type');
const ArgumentType = require('../../extension-support/argument-type')
const socket=require('../../util/socket-connect')

let newSocket;
let isConnectEventSource=false
let eventSource
let scratchGet=[]

class RobotShow {
    constructor(runtime){
        this.runtime=runtime


        this.flag='0'
        this.channel = new BroadcastChannel('flag_channel');
        this.channel.addEventListener('message', (event) => {
            console.log('Received flag data:', event.data);
            this.flag=event.data
            // if(event.data=='1'){
            //     eventSource = new EventSource('http://192.168.4.1:8083/stream');
            //     eventSource.onerror = function(error) {
            //         console.error('Error:', error);
            //         eventSource.close();
            //     };
            //     eventSource.onmessage = function(event) {
            //         // output.innerHTML = "Received from server: " + event.data;
            //         // console.log(event.data)
            //         // console.log(Date.now())

            //         scratchGet=JSON.parse(event.data)
                    
            //     };
            // }else if(event.data=='0'){
            //     try{
            //         eventSource.close();
            //     }catch(e){

            //     }
            // }
        });
        this.mode=true
        this.channelMode=new BroadcastChannel('mode')
        this.channelMode.addEventListener('message',(event)=>{
            this.mode=event.data
        })


        this.line;

        this.whatSendFun='net'
        this.channelPort = new BroadcastChannel('channelPort')
        this.channelPort.addEventListener('message',(event)=>{
            console.log(event.data)
            if(event.data){
                this.whatSendFun='port'
            }else{
                this.whatSendFun='net'
            }
            
        })



    }
  getInfo() {

    return {
      id: 'robotshow',
      name: '显示',
    //   color1: '#ffe4e1',
    //   color3: '#ff0000',
      blocks: [

        

        {
            opcode: 'brightness',
            blockType: BlockType.COMMAND,
            text: '设置显示亮度[ONE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_BRIGHTNESS'
                },
            },
        },

        {
            opcode: 'showImageTime',
            blockType: BlockType.COMMAND,
            text: '[THREE]显示图案[ONE] [TWO]秒',
            arguments:{
                ONE:{
                    type: ArgumentType.MATRIXCUSTOM,
                    defaultValue
                    
                },
                TWO:{
                    type: ArgumentType.STRING,
                    defaultValue:2
                },
                THREE:{
                    type: ArgumentType.STRING,
                    menu:'SHOW_MODE'
                },
            },
        },
        {
            opcode: 'showImage',
            blockType: BlockType.COMMAND,
            text: '[TWO]显示图案[ONE]',
            arguments:{
                ONE:{
                    type: ArgumentType.MATRIXCUSTOM,
                    defaultValue

                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu:'SHOW_MODE'
                },
            },
        },


        {
            opcode: 'showTextNoPlace',
            blockType: BlockType.COMMAND,
            text: '[TWO]显示文本[ONE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    defaultValue:'12:12'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu:'SHOW_MODE'
                },
            },
        },

       
        // {
        //     opcode: 'showText',
        //     blockType: BlockType.COMMAND,
        //     text: '显示字符串 [ONE] 在x[TWO] y[THREE]',
        //     arguments:{
        //         ONE:{
        //             type: ArgumentType.STRING,
        //             defaultValue:'hello'
        //         },
        //         TWO:{
        //             type: ArgumentType.STRING,
        //             defaultValue:0
        //         },
        //         THREE:{
        //             type: ArgumentType.STRING,
        //             defaultValue:0
        //         },
                
        //     },
        // },

        {
            opcode: 'setPixelSave',
            blockType: BlockType.COMMAND,
            text: '点亮 x:[TWO] y:[THREE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_PIXEL'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
                THREE:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
            },
        },

        {
            opcode: 'setPixel',
            blockType: BlockType.COMMAND,
            text: '只点亮 x:[TWO] y:[THREE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_PIXEL'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
                THREE:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
            },
        },

        {
            opcode: 'clearPixel',
            blockType: BlockType.COMMAND,
            text: '熄灭 x:[TWO] y:[THREE]',
            arguments:{
                TWO:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
                THREE:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
            },
        },

        {
            opcode: 'changePixel',
            blockType: BlockType.COMMAND,
            text: '切换点亮与熄灭 x:[TWO] y:[THREE]',
            arguments:{
                TWO:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
                THREE:{
                    type: ArgumentType.STRING,
                    defaultValue:0
                },
            },
        },

        // {
        //     opcode: 'isPixel',
        //     blockType: BlockType.BOOLEAN,
        //     text: 'x:[TWO] y:[THREE]是点亮状态？',
        //     arguments:{
        //         TWO:{
        //             type: ArgumentType.STRING,
        //             defaultValue:0
        //         },
        //         THREE:{
        //             type: ArgumentType.STRING,
        //             defaultValue:0
        //         },
        //     },
        // },

        {
            opcode: 'clear',
            blockType: BlockType.COMMAND,
            text: '熄屏',
            arguments:{
               
            },
        },

        

      ],

      menus: {
        MENU_PIXEL: {
            acceptReporters: false,
            items: [
              {
                  text: '点亮',
                  value: '0'
                },
              {
                text: '熄灭',
                value: '1'
              },
               
            ]
          },
        MENU_BRIGHTNESS: {
            acceptReporters: false,
            items: [
                {
                    text: '0',
                    value: '0'
                },
                {
                    text: '1',
                    value: '1'
                },
                {
                    text: '2',
                    value: '2'
                },
                {
                    text: '3',
                    value: '3'
                },
                {
                    text: '4',
                    value: '4'
                },
                {
                    text: '5',
                    value: '5'
                },
                {
                    text: '6',
                    value: '6'
                },
                {
                    text: '7',
                    value: '7'
                },
                {
                    text: '8',
                    value: '8'
                },
                {
                    text: '9',
                    value: '9'
                },
                {
                    text: '10',
                    value: '10'
                },
                // {
                //     text: '11',
                //     value: '11'
                // },
                // {
                //     text: '12',
                //     value: '12'
                // },
                // {
                //     text: '13',
                //     value: '13'
                // },
                // {
                //     text: '14',
                //     value: '14'
                // },
                // {
                //     text: '15',
                //     value: '15'
                // },
                
                
            ]
        },
        MENU_LINE_PORT: {
          acceptReporters: false,
          items: [
            {
                text: '0',
                value: '0'
              },
            {
              text: '1',
              value: '1'
            },
            {
              text: '2',
              value: '2'
            },
            {
                text: '3',
                value: '3'
            },
            {
                text: '4',
                value: '4'
              },
              {
                text: '5',
                value: '5'
              },
             
          ]
        },
       
        MENU_COMPARE: {
            acceptReporters: false,
            items: [
                {
                    text: '>',
                    value: '>'
                },
                {
                    text: '<',
                    value: '<'
                },
                {
                    text: '=',
                    value: '='
                }
                
            ]
        },
        SHOW_MODE:{
            acceptReporters: false,
            items: [
                {
                    text: '静态',
                    value: '0'
                },
                {
                    text: '自右往左',
                    value: '1'
                },
                {
                    text: '自左往右',
                    value: '2'
                },
                {
                    text: '自上往下',
                    value: '3'
                },
                {
                    text: '自下往上',
                    value: '4'
                },
                
                
            ]
        },
        
    }
    };
  }

//   taillight(){

//   }
    convertBinaryTo2DArray(binaryData) {
        // 确保输入的数据长度是192
        if (binaryData.length !== 192) {
            throw new Error("输入的二进制数据长度必须为 192 位");
        }

        const result = [];
        // 将数据每24位分为一组
        for (let i = 0; i < 8; i++) {
            // 从第 i * 24 位开始，取出 24 位数据
            const group = binaryData.slice(i * 24, (i + 1) * 24);
            // 将每组数据转为数组并添加到结果数组中
            result.push(group.split('').map(Number));
        }

        return result;
    }
    convertToHex(binary2DArray) {
        // 结果数组，用来存储每一列的十六进制值
        const hexArray = [];
    
        // 遍历每一列
        for (let col = 0; col < binary2DArray[0].length; col++) {
            // 获取这一列的所有行的二进制数据
            let binaryString = '';
            for (let row = binary2DArray.length-1; row >=0; row--) {
                binaryString += binary2DArray[row][col];  // 将该列的每一行元素拼接成二进制字符串
            }
    
            // 将二进制字符串转为十六进制
            let hexValue = parseInt(binaryString, 2).toString(16).toUpperCase();  // 转为十六进制并大写

            
    
            // 将结果加入到 hexArray 中
            // let HEX='0x'+hexValue
            // let HEX = `0x${hexValue}`
            // HEX=HEX.replace(/['"]/g, "")
            // console.log(hexValue)
            // console.log(typeof hexValue)
            // hexValue=hexValue.replace(/['"]/g, "")
            
            hexArray.push(parseInt(hexValue, 16));
        }
    
        return hexArray;
    }

    async brightness(args){
        if(this.mode){

            let jsonData={
                "command":"display",
                "params":{
                    "mode":1,
                    "lum":Number(args.ONE),
                    "image":[],
                    "var":"",
                    "pos_x":0,
                    "pos_y":0,
                    "num":1,
                    "way":0
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else if(this.whatSendFun=='port'){
                this.channelPort.postMessage(str)
            }
            
            
        }
    }

    async showImage(args){
        if(this.mode){

            const result=this.convertBinaryTo2DArray(args.ONE)
            let hexArr=this.convertToHex(result)

            let jsonData={
                "command":"display",
                "params":{
                    "mode":2,
                    "lum":1,
                    "image":hexArr,
                    "var":"",
                    "pos_x":0,
                    "pos_y":0,
                    "num":1,
                    "way":Number(args.TWO)
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else if(this.whatSendFun=='port'){
                this.channelPort.postMessage(str)
            }
            
            
        }
    }


    async showImageTime(args){
        if(this.mode){

            const result=this.convertBinaryTo2DArray(args.ONE)
            let hexArr=this.convertToHex(result)

            let jsonData={
                "command":"display",
                "params":{
                    "mode":2,
                    "lum":1,
                    "image":hexArr,
                    "var":"",
                    "pos_x":0,
                    "pos_y":0,
                    "num":1,
                    "way":Number(args.THREE)
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        

            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                await new Promise(resolve => setTimeout(resolve, Number(args.TWO)*1000));
    
                this.clear()
    
                socket.setLastPostTime(Date.now())
            }else{
                this.channelPort.postMessage(str)
                await new Promise(resolve => setTimeout(resolve, Number(args.TWO)*1000));
                this.clear()
            }
        
            
            
        }
    }

    containsChinese(text) {
        return /[\u4e00-\u9fa5]/.test(text);
    }

    async showTextNoPlace(args){
        if(this.mode){

            if(this.containsChinese(args.ONE)){
                return
            }

            let jsonData={
                "command":"display",
                "params":{
                    "mode":3,
                    "lum":1,
                    "image":[],
                    "var":args.ONE.toString().slice(0,30),
                    "pos_x":0,
                    "pos_y":0,
                    "num":1,
                    "way":Number(args.TWO)
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else if(this.whatSendFun=='port'){
                this.channelPort.postMessage(str)
            }
           
            
        }
    }

    async showText(args){
        if(this.mode){


            let jsonData={
                "command":"display",
                "params":{
                    "mode":3,
                    "lum":1,
                    "image":[],
                    "var":args.ONE,
                    "pos_x":Number(args.TWO),
                    "pos_y":Number(args.THREE),
                    "status":0
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
                await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
            }

            socket.setLastPostTime(Date.now())
            
        }
    }
    
    async setPixelSave(args){
        if(this.mode){


            let jsonData={
                "command":"display",
                "params":{
                    "mode":5,
                    "lum":1,
                    "image":[],
                    "var":"",
                    "pos_x":Number(args.TWO),
                    "pos_y":Number(args.THREE),
                    "num":1,
                    "way":0
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else{
                this.channelPort.postMessage(str)
            }
            
            
        }
    }

    async setPixel(args){
        if(this.mode){


            let jsonData={
                "command":"display",
                "params":{
                    "mode":6,
                    "lum":1,
                    "image":[],
                    "var":"",
                    "pos_x":Number(args.TWO),
                    "pos_y":Number(args.THREE),
                    "num":1,
                    "way":0
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else{
                this.channelPort.postMessage(str)
            }
            
            
        }
    }

    async clearPixel(args){
        if(this.mode){


            let jsonData={
                "command":"display",
                "params":{
                    "mode":7,
                    "lum":1,
                    "image":[],
                    "var":"",
                    "pos_x":Number(args.TWO),
                    "pos_y":Number(args.THREE),
                    "num":1,
                    "way":0
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else{
                this.channelPort.postMessage(str)
            }
            
            
        }
    }

    async changePixel(args){
        if(this.mode){


            let jsonData={
                "command":"display",
                "params":{
                    "mode":8,
                    "lum":1,
                    "image":[],
                    "var":"",
                    "pos_x":Number(args.TWO),
                    "pos_y":Number(args.THREE),
                    "num":1,
                    "way":0
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else{
                this.channelPort.postMessage(str)
            }
        
            
            
        }
    }


    

    async clear(){
        if(this.mode){


            let jsonData={
                "command":"display",
                "params":{
                    "mode":9,
                    "lum":1,
                    "image":[],
                    "var":"",
                    "pos_x":0,
                    "pos_y":0,
                    "num":1,
                    "way":0
                }
            }
            // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
            let str = JSON.stringify(jsonData)
        
        
            if(this.whatSendFun=='net'){
                if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                    console.log('断开连接，尝试重连')
                    let context=[]
                    context.push(str)
                    await socket.setSocket(context)
                }else if(socket.checkWebSocketStatus()==2){
                    socket.getSocket().send(str);
                    await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                }
    
                socket.setLastPostTime(Date.now())
            }else{
                this.channelPort.postMessage(str)
            }
            
            
        }
    }

}


module.exports = RobotShow;
