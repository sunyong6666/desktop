const BlockType = require('../../extension-support/block-type');
const ArgumentType = require('../../extension-support/argument-type')
const socket=require('../../util/socket-connect')

let newSocket;
let isConnectEventSource=false
let eventSource
let scratchGet=[]
let socketSound
let stream

let audioContext, processor;
let audioChunks = [];
let isSSRecording = false;
const CHUNK_SIZE = 1024; // 每块的帧数

class RobotSensors {
    constructor(runtime){
        this.runtime=runtime


        this.flag='0'
        this.channel = new BroadcastChannel('flag_channel');
        this.channel.addEventListener('message', (event) => {
            console.log('Received flag data:', event.data);
            this.flag=event.data
            // if(event.data=='1'){
            //     eventSource = new EventSource('http://192.168.4.1:8083/stream');
            //     eventSource.onerror = function(error) {
            //         console.error('Error:', error);
            //         eventSource.close();
            //     };
            //     eventSource.onmessage = function(event) {
            //         // output.innerHTML = "Received from server: " + event.data;
            //         // console.log(event.data)
            //         // console.log(Date.now())

            //         scratchGet=JSON.parse(event.data)
                    
            //     };
            // }else if(event.data=='0'){
            //     try{
            //         eventSource.close();
            //     }catch(e){

            //     }
            // }
        });
        this.mode=true
        this.channelMode=new BroadcastChannel('mode')
        this.channelMode.addEventListener('message',(event)=>{
            this.mode=event.data
        })

        this.message
        this.reciveChannel = new BroadcastChannel('reciveChannel')
        this.reciveChannel.addEventListener('message',(event)=>{
            if(this.whatSendFun=='net'){
                this.message=event.data
            }
           
            // console.log(event.data)
        })

        this.line;

        setInterval(async()=>{
            if(this.mode && socket.getIp().length>0 && Date.now()-socket.getMessageTime()>5000){
                console.log('断开连接，尝试重连----')
                await socket.setSocketRecive()
            }

            
        },5000)

        this.whatSendFun='net'
        this.channelPort = new BroadcastChannel('channelPort')
        this.channelPort.addEventListener('message',(event)=>{
            console.log(event.data)
            if(event.data){
                this.whatSendFun='port'
            }else{
                this.whatSendFun='net'
            }
            
        })

        this.channelSerialData=new BroadcastChannel('serial-data')
        this.channelSerialData.addEventListener('message',(event)=>{
            // console.log(JSON.parse(event.data))
            // console.log(event.data)
            if(this.whatSendFun=='port'){
                if(event.data.length!=1){
                    this.message=event.data
                }else{
                    console.log(event.data)
                }
                
            }

            if(!this.mode &&event.data.length==1){
                if(event.data[0]=='success'){
                    alert('下载成功')
                }
            }
        })



    }
  getInfo() {

    return {
      id: 'robotsensors',
      name: '传感器',
      color1: '#3366ff',
    //   color3: '#ff0000',
      blocks: [

        //以下为新协议块

        {
            opcode: 'key',
            blockType: BlockType.BOOLEAN,
            text: '按键[ONE]被按下',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_KEY'
                }
            },
            disableMonitor: true
        },


        {
            opcode: 'soundComp',
            blockType: BlockType.BOOLEAN,
            text: '声音 [ONE] [TWO]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_COMPARE'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    defaultValue:10
                }
            }
        },

        {
            opcode: 'sound',
            blockType: BlockType.REPORTER,
            text: '当前声音大小',
            arguments:{
                
            },
            disableMonitor: true
        },

        {
            opcode: 'elector',
            blockType: BlockType.REPORTER,
            text: '当前电量',
            arguments:{
                
            },
            disableMonitor: true
        },

        {
            opcode: 'speed',
            blockType: BlockType.REPORTER,
            text: '[ONE]当前速度',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_WHAT'
                },
            },
            disableMonitor: true
        },

        {
            opcode: 'private',
            blockType: BlockType.REPORTER,
            text: '隐私开关',
            arguments:{
                
            },
            disableMonitor: true
        },

        {
            opcode: 'distance',
            blockType: BlockType.REPORTER,
            text: '[ONE]移动距离',
            arguments:{

                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_WHAT'
                },
                
            },
            disableMonitor: true
        },

        {
            opcode: 'linemode',
            blockType: BlockType.COMMAND,
            text: '设置巡线传感器为[ONE]模式',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_LINE'
                }
            }
        },

        {
            opcode: 'grayLearning',
            blockType: BlockType.COMMAND,
            text: '运行巡线传感器灰度学习',
            arguments:{
                
            },
        },

        {
            opcode: 'graystudycolor',
            blockType: BlockType.COMMAND,
            text: '运行巡线传感器学习[ONE]颜色',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_COLOR'
                }
            }
        },
        
        
        {
            opcode: 'lineportresult',
            blockType: BlockType.REPORTER,
            text: '巡线传感器探头[ONE]检测到的值',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_LINE_PORT'
                }
            },
            disableMonitor: true
        },
        {
            opcode: 'lineportcolor',
            blockType: BlockType.BOOLEAN,
            text: '巡线传感器探头[ONE]检测到[TWO]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_LINE_PORT'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu:'MENU_COLOR'
                }
            },
            disableMonitor: true
        },

        {
            opcode: 'islineport',
            blockType: BlockType.BOOLEAN,
            text: '巡线传感器探头[ONE]检测到的值[TWO][THREE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_LINE_PORT'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu:'MENU_COMPARE'
                },
                THREE:{
                    type: ArgumentType.STRING,
                    defaultValue:50
                }
            },
            disableMonitor: true
        },

        


        {
            opcode: 'closeLight',
            blockType: BlockType.COMMAND,
            text: '关闭巡线传感器',
            arguments:{
                
            },
        },


         {
            opcode: 'startLine',
            blockType: BlockType.COMMAND,
            text: '以[ONE]速度开始自动巡线',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    defaultValue:'10'
                },
            },
        },


        {
            opcode: 'startLineUntil',
            blockType: BlockType.COMMAND,
            text: '以[TWO]速度开始自动巡线 直到 状态为[ONE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_AUTO_LINE_UNTIL',
                    defaultValue:'00000'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    defaultValue:'10'
                },
            },
        },
        {
            opcode: 'stopLine',
            blockType: BlockType.COMMAND,
            text: '停止自动巡线',
            arguments:{
            },
        },

        {
            opcode: 'asrStart',
            blockType: BlockType.COMMAND,
            text: '开始离线语音识别',
            arguments:{
            },
        },

        {
            opcode: 'asrStop',
            blockType: BlockType.COMMAND,
            text: '停止离线语音识别',
            arguments:{
            },
        },

        {
            opcode: 'asrResult',
            blockType: BlockType.BOOLEAN,
            text: '识别结果为[ONE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu:'MENU_SOUND',
                },
            },
            disableMonitor: true
        },


        {
            opcode: 'startPreDown',
            blockType: BlockType.COMMAND,
            text: '以[ONE]安全距离开始防跌落',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    defaultValue:'10'
                },
            },
        },

        {
            opcode: 'stopPreDown',
            blockType: BlockType.COMMAND,
            text: '停止防跌落',
            arguments:{
               
            },
        },

        // {
        //     opcode: 'cstartsound',
        //     blockType: BlockType.COMMAND,
        //     text: '[ONE]实时喊话',
        //     arguments:{
        //         ONE:{
        //             type: ArgumentType.STRING,
        //             menu:'MENU_IMGCON'
        //         },
        //     },
            
        // },

        

      ],

      menus: {
        MENU_PIXEL: {
            acceptReporters: false,
            items: [
              {
                  text: '点亮',
                  value: '0'
                },
              {
                text: '熄灭',
                value: '1'
              },
               
            ]
          },
        MENU_WHAT: {
        acceptReporters: false,
        items: [
            {
                text: '左轮',
                value: '0'
            },
            {
                text: '右轮',
                value: '1'
            },
            
        ]
        },
        MENU_BRIGHTNESS: {
            acceptReporters: false,
            items: [
                {
                    text: '0',
                    value: '0'
                },
                {
                    text: '1',
                    value: '1'
                },
                {
                    text: '2',
                    value: '2'
                },
                {
                    text: '3',
                    value: '3'
                },
                {
                    text: '4',
                    value: '4'
                },
                {
                    text: '5',
                    value: '5'
                },
                {
                    text: '6',
                    value: '6'
                },
                {
                    text: '7',
                    value: '7'
                },
                {
                    text: '8',
                    value: '8'
                },
                {
                    text: '9',
                    value: '9'
                },
                {
                    text: '10',
                    value: '10'
                },
                {
                    text: '11',
                    value: '11'
                },
                {
                    text: '12',
                    value: '12'
                },
                {
                    text: '13',
                    value: '13'
                },
                {
                    text: '14',
                    value: '14'
                },
                {
                    text: '15',
                    value: '15'
                },
                
                
            ]
        },
        MENU_LINE_PORT: {
          acceptReporters: false,
          items: [
            {
              text: 'L1',
              value: '0'
            },
            {
              text: 'L2',
              value: '1'
            },
            {
                text: 'M',
                value: '2'
            },
            {
                text: 'R2',
                value: '3'
              },
              {
                text: 'R1',
                value: '4'
              },
             
          ]
        },
        MENU_AUTO_LINE_UNTIL: {
            acceptReporters: false,
            items: [
                {
                    text: '00000',
                    value: '00000'
                },
                {
                    text: '00001',
                    value: '00001'
                },
                {
                    text: '00010',
                    value: '00010'
                },
                {
                    text: '00011',
                    value: '00011'
                },
                {
                    text: '00100',
                    value: '00100'
                },

                {
                    text: '00101',
                    value: '00101'
                },
                {
                    text: '00110',
                    value: '00110'
                },
                {
                    text: '00111',
                    value: '00111'
                },
                {
                    text: '01000',
                    value: '01000'
                },
                {
                    text: '01001',
                    value: '01001'
                },
                {
                    text: '01010',
                    value: '01010'
                },
                {
                    text: '01011',
                    value: '01011'
                },
                {
                    text: '01100',
                    value: '01100'
                },
                {
                    text: '01101',
                    value: '01101'
                },
                {
                    text: '01110',
                    value: '01110'
                },
                {
                    text: '01111',
                    value: '01111'
                },
                {
                    text: '10000',
                    value: '10000'
                },
                {
                    text: '10001',
                    value: '10001'
                },
                {
                    text: '10010',
                    value: '10010'
                },
                {
                    text: '10011',
                    value: '10011'
                },
                {
                    text: '10100',
                    value: '10100'
                },
                {
                    text: '10101',
                    value: '10101'
                },
                {
                    text: '10110',
                    value: '10110'
                },
                {
                    text: '10111',
                    value: '10111'
                },
                {
                    text: '11000',
                    value: '11000'
                },
                {
                    text: '11001',
                    value: '11001'
                },
                {
                    text: '11010',
                    value: '11010'
                },
                {
                    text: '11011',
                    value: '11011'
                },
                {
                    text: '11100',
                    value: '11100'
                },
                {
                    text: '11101',
                    value: '11101'
                },
                {
                    text: '11110',
                    value: '11110'
                },
                {
                    text: '11111',
                    value: '11111'
                },
                
            ]
        },
        MENU_COMPARE: {
            acceptReporters: false,
            items: [
                {
                    text: '>',
                    value: '>'
                },
                {
                    text: '<',
                    value: '<'
                },
                {
                    text: '=',
                    value: '='
                }
                
            ]
        },

        MENU_LINE: {
            acceptReporters: false,
            items: [
                {
                    text:'二值',
                    value:'1'
                },
                {
                    text: '灰度',
                    value: '2'
                },
                {
                    text: '颜色',
                    value: '3'
                },
                
            ]
        },

        MENU_COLOR: {
            acceptReporters: false,
            items: [
                {
                    text: '红',
                    value: '1'
                },
                {
                    text: '橙',
                    value: '2'
                },
                {
                    text: '黄',
                    value: '3'
                },
                {
                    text: '绿',
                    value: '4'
                },
                {
                    text: '青',
                    value: '5'
                },
                {
                    text: '蓝',
                    value: '6'
                },
                {
                    text: '紫',
                    value: '7'
                },
                {
                    text: '黑',
                    value: '0'
                },
                {
                    text: '白',
                    value: '8'
                },
            ]
        },
        MENU_KEY:{
            acceptReporters: false,
            items: [
                {
                    text: '➡️',
                    value: '7'
                },
                {
                    text: '⬅️',
                    value: '8'
                },
                
            ]
        },
        MENU_MUSIC:{
            acceptReporters: false,
            items: [
                {
                    text: '汽车声',
                    value: 'car.wav'
                },
                {
                    text: '小猫叫',
                    value: 'cat.wav'
                },
                {
                    text: '小狗叫',
                    value: 'dog.wav'
                },

                
            ]
        },
        MENU_IMGCON:{
            acceptReporters: false,
            items: [
                {
                    text: '开启',
                    value: '1'
                },
                {
                    text: '关闭',
                    value: '2'
                },
            ]
        },
        MENU_SOUND:{
            acceptReporters: false,
            items: [
                {
                    text: '前进/向前/出发/直行',
                    value: '1,2,3,4'
                },
                {
                    text: '后退/向后/倒车',
                    value: '6,7,8'
                },
                {
                    text: '左转/向左转',
                    value: '11,12'
                },
                {
                    text: '右转/向右转',
                    value: '16,17'
                },

                {
                    text: '停止/停止运动',
                    value: '26,27'
                },
                {
                    text: '夹住/抓住',
                    value: '31,32'
                },

                {
                    text: '松开/放下',
                    value: '36,37'
                },
                {
                    text: '发射/开炮/发射下一颗',
                    value: '41,42,43'
                },
                {
                    text: '连续发射/连发',
                    value: '51,52'
                },
                {
                    text: '开始巡线',
                    value: '61,62'
                },
                {
                    text: '停止巡线/结束巡线',
                    value: '66,67'
                },
                {
                    text: '开心',
                    value: '71'
                },
                {
                    text: '生气',
                    value: '72'
                },
                {
                    text: '伤心',
                    value: '73'
                },
                {
                    text: '微笑',
                    value: '74'
                },
                {
                    text: '哭泣',
                    value: '75'
                },
                
            ]
        }
    }
    };
  }


  async waitForSuccess() {
    return new Promise((resolve) => {
        function messageHandler(event) {
            try {
                let data = event.data;
                if (data === "success") {
                    console.log("收到 success 响应");
                    socket.getSocket().removeEventListener('message', messageHandler); // 解除监听
                    resolve(); // 继续执行
                }
            } catch (error) {
                console.error("解析 WebSocket 消息出错", error);
            }
        }

        socket.getSocket().addEventListener('message', messageHandler);
    });
}

  async grayLearning(){
    if(this.mode){

        let jsonData={
            "command":"rgb_sensor",
            "params":{
                "mode":1,
                "learn_color":0,
                "num":0
            }
        }
        // let str = `robot.send_grayscale_learn()\r`;
        let str = JSON.stringify(jsonData)

        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
    
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
        
    }
  }
  async graystudycolor(args){

    if(this.mode){

        let jsonData={
            "command":"rgb_sensor",
            "params":{
                "mode":2,
                "learn_color":Number(args.ONE),
                "num":0
            }
        }
        // let str = `robot.send_color_learn(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)

        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
    
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
       
    }
    

    
    
    // await fetch(`http://192.168.4.1:8082/scratch_line?mode=5&color=${args.ONE}`)
    //     .then(response => {
    //         if (!response.ok) {
    //             throw new Error('Network response was not ok');
    //         }
    //         return response.text();
    //     })
    //     .then(data => {
    //         console.log('Success:', data);
    //     })
    //     .catch(error => {
    //         console.error('There was an error with the fetch operation:', error);
    //     });
  }
  async linemode(args){
    if(this.mode){

        let jsonData={
            "command":"rgb_sensor",
            "params":{
                "mode":3,
                "learn_color":0,
                "num":Number(args.ONE)
            }
        }
        // let str = `robot.set_line_mode(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)

        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
    
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
        
    }


    
    

    
    

    // await fetch(`http://192.168.4.1:8082/scratch_line?mode=${args.ONE}&color=0`)
    //     .then(response => {
    //         if (!response.ok) {
    //             throw new Error('Network response was not ok');
    //         }
    //         return response.text();
    //     })
    //     .then(data => {
    //         console.log('Success:', data);
    //     })
    //     .catch(error => {
    //         console.error('There was an error with the fetch operation:', error);
    //     });
  }

  async startPreDown(args){
    if(this.mode){

        let jsonData={
            "command":"line_tracking",
            "params":{
                "mode":3,
                "speed":Number(args.ONE),
                "line":[0,0,0,0,0], 
            }
        }
        // let str = `robot.set_line_mode(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)

        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
    
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
        
    }

  }

  async stopPreDown(){
    if(this.mode){

        let jsonData={
            "command":"line_tracking",
            "params":{
                "mode":4,
                "speed":0,
                "line":[0,0,0,0,0], 
            }
        }
        // let str = `robot.set_line_mode(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)

        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
    
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
        
    }
  }

  async lineportallresult(){
    // if(this.flag=='1'){
    //     let result=scratchGet.slice(2)
    //     this.line=result
    //     // return result
    // }

    if(this.mode){
        console.log(this.message)
        let result=this.message.slice(9)

        this.line=result
        return this.line

        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连')
        //         await socket.setSocketRecive()
        //     }
        //     let result=this.message.slice(9)

        //     this.line=result
        //     return this.line
        // }
        
    }
    
  }

  async lineportcolor(args){
    if(this.mode){
        console.log(this.message)
        // return this.line[args.ONE]

        let result=this.message.slice(9)

            
        if(result[args.ONE]==args.TWO){
            return true
        }else{
            return false
        }

        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连')
        //         await socket.setSocketRecive()
        //     }
        //     let result=this.message.slice(9)

            
        //     if(result[args.ONE]==args.TWO){
        //         return true
        //     }else{
        //         return false
        //     }
        // }
    }
  }
  async lineportresult(args){
    // if(this.flag=='1'){
    //     // let result=scratchGet.slice(2)
    //     return this.line[args.ONE]
    // }

    if(this.mode){
        console.log(this.message)
        // return this.line[args.ONE]
        let result=this.message.slice(9)

            
        return result[args.ONE]

        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连')
        //         await socket.setSocketRecive()
        //     }
        //     let result=this.message.slice(9)

            
        //     return result[args.ONE]
        // }
    }


    
  }
  async islineport(args){
    // if(this.flag=='1'){
    //     let result=scratchGet.slice(2)
    //     if(args.TWO=='>' && result[args.ONE]>args.THREE){
    //         return true
    //     }else if(args.TWO=='<' && result[args.ONE]<args.THREE){
    //         return true
    //     }else if(args.TWO=='=' && result[args.ONE]==args.THREE){
    //         return true
    //     }
    //     return false
    // }
    if(this.mode){

        console.log(this.message)

        let result=this.message.slice(9)

        if(args.TWO=='>' && result[args.ONE]>args.THREE){
            return true
        }else if(args.TWO=='<' && result[args.ONE]<args.THREE){
            return true
        }else if(args.TWO=='=' && result[args.ONE]==args.THREE){
            return true
        }
        return false
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连')
        //         await socket.setSocketRecive()
        //     }
        //     let result=this.message.slice(9)

        //     if(args.TWO=='>' && result[args.ONE]>args.THREE){
        //         return true
        //     }else if(args.TWO=='<' && result[args.ONE]<args.THREE){
        //         return true
        //     }else if(args.TWO=='=' && result[args.ONE]==args.THREE){
        //         return true
        //     }
        //     return false
            
        // }
        
    }

    
  }



  async key(args){
    if(this.mode){
        console.log(this.message)
        // console.log(socket.checkWebSocketStatusRecive())
        let startTime=Date.now()
        console.log(socket.checkWebSocketStatusRecive())

        if(this.message[0]==0 && args.ONE==8){
            let lastTime=Date.now()
            console.log('--------------')
            console.log(lastTime-startTime)
            return true
        }else if(this.message[1]==0 && args.ONE==7){
            let lastTime=Date.now()
            console.log('--------------')
            console.log(lastTime-startTime)
            return true
        }
        return false
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连----')
        //         await socket.setSocketRecive()
        //     }
        //     console.log('返回值：'+this.message)
        //     if(this.message[0]==0 && args.ONE==8){
        //         let lastTime=Date.now()
        //         console.log('--------------')
        //         console.log(lastTime-startTime)
        //         return true
        //     }else if(this.message[1]==0 && args.ONE==7){
        //         let lastTime=Date.now()
        //         console.log('--------------')
        //         console.log(lastTime-startTime)
        //         return true
        //     }
        //     return false
        // }
        
    
    //     // if(socket.getMessage()[0]==0 && args.ONE==8){
    //     //     return true
    //     // }else if(socket.getMessage()[1]==0 && args.ONE==7){
    //     //     return true
    //     // }
    //     // return false
        
        
    }
  }

  async soundComp(args){

    if(this.mode){
        console.log(this.message)
        if(args.ONE=='>'){
            if(this.message[3]>args.TWO){
                return true
            }else{
                return false
            }
        }else if(args.ONE=='='){
            if(this.message[3]==args.TWO){
                return true
            }else{
                return false
            }
        }else if(args.ONE=='<'){
            if(this.message[3]<args.TWO){
                return true
            }else{
                return false
            }
        }
        // console.log(socket.checkWebSocketStatusRecive())
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连----')
        //         await socket.setSocketRecive()
        //     }
            

        //     if(args.ONE=='>'){
        //         if(this.message[3]>args.TWO){
        //             return true
        //         }else{
        //             return false
        //         }
        //     }else if(args.ONE=='='){
        //         if(this.message[3]==args.TWO){
        //             return true
        //         }else{
        //             return false
        //         }
        //     }else if(args.ONE=='<'){
        //         if(this.message[3]<args.TWO){
        //             return true
        //         }else{
        //             return false
        //         }
        //     }
        // }
    
        
        
    }

  }



  async sound(){
    if(this.mode){
        console.log(this.message)
        return this.message[3]
        // console.log(socket.checkWebSocketStatusRecive())
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连----')
        //         await socket.setSocketRecive()
        //     }
            

        //    return this.message[3]
        // }
    
        
        
    }

  }
  async elector(){
    if(this.mode){
        console.log(this.message)
        return (this.message[4]/4)*100
        // console.log(socket.checkWebSocketStatusRecive())
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连----')
        //         await socket.setSocketRecive()
        //     }
            
        //     return (this.message[4]/4)*100
        // }
    
        
        
    }

  }

  async speed(args){
    if(this.mode){
        console.log(this.message)
        if(args.ONE=='0'){
            return this.message[5]
        }else{
            return this.message[6]  
        }
        // console.log(socket.checkWebSocketStatusRecive())
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连----')
        //         await socket.setSocketRecive()
        //     }
            
        //     if(args.ONE=='0'){
        //         return this.message[5]
        //     }else{
        //         return this.message[6]  
        //     }
            
        // }
    
        
        
    }
  }

  async private(){
    if(this.mode){
        console.log(this.message)
        return this.message[2]
        // console.log(socket.checkWebSocketStatusRecive())
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连----')
        //         await socket.setSocketRecive()
        //     }
            
        //     return this.message[2]
        // }
    
        
        
    }
  }

  async distance(args){
    if(this.mode){
        console.log(this.message)
        if(args.ONE=='0'){
            return this.message[7]
        }else{
            return this.message[8]
        }
        // console.log(socket.checkWebSocketStatusRecive())
        // if(socket.checkWebSocketStatusRecive()==4 || socket.checkWebSocketStatusRecive()==0){
        //     console.log('断开连接，尝试重连')
        //     await socket.setSocketRecive()
        // }else if(socket.checkWebSocketStatusRecive()==2){
        //     if(Date.now()-socket.getMessageTime()>5000){
        //         console.log('断开连接，尝试重连----')
        //         await socket.setSocketRecive()
        //     }
            
        //     if(args.ONE=='0'){
        //         return this.message[8]
        //     }else{
        //         return this.message[9]
        //     }
            
        // }
    
        
        
    }
  }

  async startLine(args){
    if(this.mode){

        let jsonData={
            "command":"line_tracking",
            "params":{
                "mode":2,
                "speed":Number(args.ONE),
                "line":[0,0,0,0,0],
            }
        }
        // let str = `robot.set_line_mode(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)

        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
        
    }
  }

  async stopLine(){
    if(this.mode){

        let jsonData={
            "command":"line_tracking",
            "params":{
                "mode":3,
                "speed":0,
                "line":[0,0,0,0,0],
            }
        }
        // let str = `robot.set_line_mode(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)
        // if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
        //     console.log('断开连接，尝试重连')
        //     let context=[]
        //     context.push(str)
        //     await socket.setSocket(context)
        // }else if(socket.checkWebSocketStatus()==2){
        //     socket.getSocket().send(str);
        // }
        // socket.setLastPostTime(Date.now())

        if(this.whatSendFun=='net'){
            const Socket = new WebSocket(`ws://${socket.getIp()}:8084`);
                    
            Socket.addEventListener('open', async (event) => {
                console.log('连接成功');
                Socket.send(str)
                await new Promise(resolve => setTimeout(resolve, 100));
                Socket.close()
    
                    
            });
        }else{
            this.channelPort.postMessage(str)
        }

        
    }
  }


  async startLineUntil(args){
    if(this.mode){

        const arr = args.ONE.split('').map(Number);
        let jsonData={
            "command":"line_tracking",
            "params":{
                "mode":1,
                "speed":Number(args.TWO),
                "line":arr
            }
        }
        // let str = `robot.set_line_mode(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)

        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
            await this.waitForSuccess()
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
        
    }
  }


  async closeLight(){
    if(this.mode){

        let jsonData={
            "command":"rgb_sensor",
            "params":{
                "mode":4,
                "learn_color":0,
                "num":0
            }
        }
        // let str = `robot.set_line_mode(${args.ONE})\r`;
        let str = JSON.stringify(jsonData)
        if(this.whatSendFun=='net'){
            if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                console.log('断开连接，尝试重连')
                let context=[]
                context.push(str)
                await socket.setSocket(context)
            }else if(socket.checkWebSocketStatus()==2){
                socket.getSocket().send(str);
            }
    
            socket.setLastPostTime(Date.now())
        }else{
            this.channelPort.postMessage(str)
        }
        
    }
  }


  async cstartsound(args){

    
    if(args.ONE=='1'){
        socketSound = new WebSocket(`ws://${socket.getIp()}:8080`)

        isSSRecording = true;
        socketSound.addEventListener('open',async()=>{
        // 获取麦克风音频流
        stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        audioContext = new AudioContext({ sampleRate: 8000 });
        const source = audioContext.createMediaStreamSource(stream);

        processor = audioContext.createScriptProcessor(1024, 1, 1);
        source.connect(processor);
        processor.connect(audioContext.destination);

        // 处理音频数据块
        processor.onaudioprocess = (event) => {
            const inputBuffer = event.inputBuffer.getChannelData(0);
            const int16Array = new Int16Array(inputBuffer.length);

            // 将浮点数据转换为 16 位整数
            for (let i = 0; i < inputBuffer.length; i++) {
                int16Array[i] = Math.min(1, Math.max(-1, inputBuffer[i])) * 0x7FFF;
            }

            audioChunks.push(...int16Array);

            // 检查是否达到了 CHUNK_SIZE 大小
            if (audioChunks.length >= CHUNK_SIZE) {
                const chunkToSend = audioChunks.slice(0, CHUNK_SIZE); // 截取 CHUNK_SIZE 大小
                audioChunks = audioChunks.slice(CHUNK_SIZE); // 保留剩余部分
                this.sendAudioChunk(chunkToSend);
            }
        };
        })

        // setTimeout(() => {
        //     this.cstartsound('2')
        // }, 5000);

        
    }else{
        
        isSSRecording = false;

        if (processor) processor.disconnect();
        if (audioContext) audioContext.close();

        // 清空剩余的音频块
        if (audioChunks.length > 0) {
            this.sendAudioChunk(audioChunks);
            audioChunks = [];
        }

        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        socketSound.close()
    }
    

  }

    async sendAudioChunk(chunk) {


        console.log(new Int16Array(chunk).buffer)
        socketSound.send(new Int16Array(chunk).buffer)
        // if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
        //     console.log('断开连接，尝试重连')
        //     let context=[]
        //     context.push(str)
        //     await socket.setSocket(context)
        //     await new Promise(resolve => setTimeout(resolve, 200)); 
        // }else if(socket.checkWebSocketStatus()==2){
        //     socket.getSocket().send(str);
        //     await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
        // }
        // try {
        //     const response = await fetch('http://192.168.4.1:8082/receive_audio', {
        //         method: 'POST',
        //         headers: {
        //             "Content-Type": "application/octet-stream"
        //         },
        //         body: new Int16Array(chunk).buffer // 转为 ArrayBuffer 发送
        //     });

        //     if (response.ok) {
        //         console.log('音频块上传成功');
        //     } else {
        //         console.error('上传音频块失败:', response.statusText);
        //     }
        // } catch (error) {
        //     console.error('上传音频块错误:', error);
        // }

    }
}


module.exports = RobotSensors;
