const BlockType = require('../../extension-support/block-type');
const ArgumentType = require('../../extension-support/argument-type')

// const {getDistance,setDistance} = require('../../util/action')
// const socket = new WebSocket('ws://localhost:8080');
// let distance
// socket.addEventListener('open', function (event) {
//     // socket.send('Hello Server!');
//     console.log('open')
// });
// socket.addEventListener('message', function (event) {
//     // console.log(event.data);
//     distance= event.data.split(",");
//     distance=distance.map(Number);
//     console.log('vm:'+distance);
    
// });

let distance

const channel = new BroadcastChannel('distance_channel');
channel.addEventListener('message', (event) => {
    // console.log(event.data);
    distance=event.data
});


// const newSocket = new WebSocket('ws://localhost:8082');

// newSocket.addEventListener('open', (event) => {
//     console.log('WebSocket connection opened1111');
// });

// // Handle incoming WebSocket messages
// newSocket.addEventListener('message', (event) => {

//     distance=JSON.parse(event.data)

// })
let operate;

class BricksSensors {
    constructor(runtime){
        this.runtime=runtime
    }

  getInfo() {
    return {
      id: 'brickssensors',
      name: '传感器',
      // intentionally bad colors so that the effect is more clear
      color1: '#00ccff', // pure red
    //   color2: '#00ff00', // pure green
    //   color3: '#0000ff', // pure blue
      blocks: [
        {
            opcode: 'distance',
            blockType: BlockType.BOOLEAN,
            text: '端口[ONE]距离[TWO][THREE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_SIZE'
                },
                THREE:{
                    type: ArgumentType.STRING,
                    defaultValue: '0'
                }
            },
            disableMonitor: true
        },
        {
            opcode: 'song',
            blockType: BlockType.BOOLEAN,
            text: '端口[ONE]声音[TWO][THREE]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_SIZE'
                },
                THREE:{
                    type: ArgumentType.STRING,
                    defaultValue: '0'
                }
            },
            disableMonitor: true
        },
        {
            opcode: 'knob',
            blockType: BlockType.BOOLEAN,
            text: '端口[ONE]编码器[TWO]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_TIMEDIR'
                },
            },
            disableMonitor: true
        },
        {
            opcode: 'incline',
            blockType: BlockType.BOOLEAN,
            text: '端口[ONE]倾斜[TWO]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_FOURDIR'
                },
            },
            disableMonitor: true
        },
        {
            opcode: 'handpose',
            blockType: BlockType.BOOLEAN,
            text: '端口[ONE]手势[TWO]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_FOURDIR'
                },
            },
            disableMonitor: true
        },
        {
            opcode: 'controlbutton',
            blockType: BlockType.BOOLEAN,
            text: '[ONE]按键被按压',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_CONTROL'
                },
            },
            disableMonitor: true
        },
        // {
        //     opcode: 'virtualbutton',
        //     blockType: BlockType.BOOLEAN,
        //     text: '[ONE]按键被按压',
        //     arguments:{
        //         ONE:{
        //             type: ArgumentType.STRING,
        //             menu: 'FORMAT_MENU_VISUALDIR'
        //         },
        //     }
        // },
        {
            opcode: 'readincline',
            blockType: BlockType.REPORTER,
            text: '端口[ONE]倾斜[TWO]',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
                TWO:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_XY'
                }
            },
            disableMonitor: true
        },
        {
            opcode: 'readknob',
            blockType: BlockType.REPORTER,
            text: '端口[ONE]编码器',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
            },
            disableMonitor: true
        },
        {
            opcode: 'readdistance',
            blockType: BlockType.REPORTER,
            text: '端口[ONE]距离',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                },
            },
            disableMonitor: true
        },
        {
            opcode: 'readsong',
            blockType: BlockType.REPORTER,
            text: '端口[ONE]声音',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU',
                },
            },
            disableMonitor: true
        },
        {
            opcode: 'motoranagle',
            blockType: BlockType.REPORTER,
            text: '端口[ONE]读取角度',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU',
                    defaultValue:1
                }
            }
        },

        {
            opcode: 'controlState',
            blockType: BlockType.REPORTER,
            text: '返回按键[ONE]状态',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU_CONTROL'
                }
            }
        },
       

      ],
      menus: {
        FORMAT_MENU: {
          acceptReporters: false,
          items: [
            {
              text: '1',
              value: '7'
            },
            {
              text: '2',
              value: '0'
            },
            {
                text: '3',
                value: '6'
            },
            {
                text: '4',
                value: '1'
              },
              {
                text: '5',
                value: '5'
              },
              {
                text: '6',
                value: '2'
              },
              {
                text: '7',
                value: '4'
              },
              {
                text: '8',
                value: '3'
              },
          ]
        },
        FORMAT_MENU_STATE:{
            acceptReporters: false,
            items: [
                {
                    text: '正传',
                    value: '1'
                },
                {
                    text: '反转',
                    value: '-1'
                },
                {
                    text: '停止',
                    value: '0'
                },
            ]
        },
        FORMAT_MENU_SIZE:{
            acceptReporters: false,
            items: [
                {
                    text: '>',
                    value: '>'
                },
                {
                    text: '<',
                    value: '<'
                },
                {
                    text: '=',
                    value: '='
                },
            ]
        },
        FORMAT_MENU_TIMEDIR:{
            acceptReporters: false,
            items: [
                {
                    text: '顺时针',
                    value: '2'
                },
                {
                    text: '逆时针',
                    value: '1'
                },
                {
                    text: '被按下',
                    value: '0'
                },
            ]
        },
        FORMAT_MENU_FOURDIR:{
            acceptReporters: false,
            items: [
                // {
                //     text: '水平',
                //     value: '0'
                // },
                {
                    text: '向上',
                    value: '3'
                },
                {
                    text: '向下',
                    value: '4'
                },
                {
                    text: '向左',
                    value: '1'
                },
                {
                    text: '向右',
                    value: '2'
                },
            ]
        },
        FORMAT_MENU_VISUALDIR:{
            acceptReporters: false,
            items: [
                {
                    text: '向上',
                    value: '3'
                },
                {
                    text: '向下',
                    value: '4'
                },
                {
                    text: '向左',
                    value: '1'
                },
                {
                    text: '向右',
                    value: '2'
                },
                {
                    text: 'Stop',
                    value: '0'
                },
                {
                    text: 'A',
                    value: '5'
                },
                {
                    text: 'B',
                    value: '6'
                },
            ]
        },
        FORMAT_MENU_XY:{
            acceptReporters: false,
            items: [
                {
                    text: 'X',
                    value: '0'
                },
                {
                    text: 'Y',
                    value: '1'
                },
            ]
        },
        FORMAT_MENU_CONTROL:{
            acceptReporters: false,
            items: [
                {
                    text: '上',
                    value: '3'
                },
                {
                    text: '下',
                    value: '4'
                },
                {
                    text: '左',
                    value: '1'
                },
                {
                    text: '右',
                    value: '2'
                },
            ]
        },
      }
    };
  }

  readknob(args){
    // this.runtime.ioDevices.video.test()
    if(distance[5].length>0 && args.ONE==distance[5][0]){
        if(distance[5][5]==0){
            return distance[5][3]
        }else if(distance[5][5]==1){
            return `-${distance[5][3]}`
        }
    }
  }

  knob(args){
    // this.runtime.ioDevices.video.disableVideo();
    if(distance[5].length>0 && args.ONE==distance[5][0]){
        if(args.TWO==distance[5][2] && distance[5][2] != 0){
            return true
        }else if(distance[5][2] == 0 && args.TWO==distance[5][4]-1){
            return true
        }else{
            return false
        }
    }
    return false
  }

  handpose(args){
    if(distance[4].length>0 && args.ONE==distance[4][0]){
        if(args.TWO==distance[4][2]){
            return true
        }
    }
    return false
  }


  readsong(args){
    if(distance[3].length>0 && args.ONE==distance[3][0]){
        return distance[3][2]
    }
  }

  song(args){
    if(distance[3].length>0 && args.ONE==distance[3][0]){
        if(args.TWO=='>'){
            if(distance[3][2]>args.THREE){
                return true
            }else{
                return false
            }
        }else if(args.TWO=='<'){
            if(distance[3][2]<args.THREE){
                return true
            }else{
                return false
            }
        }else if(args.TWO=='='){
            if(distance[3][2]==args.THREE){
                return true
            }else{
                return false
            }
        }
    }
  }

    controlbutton(args){
        // console.log(distance[2])
        if(distance[2].length>0 && args.ONE==distance[2][1] && distance[2][2]==1){
            return true
        }
        return false
        
    }

    controlState(args){
        if(distance[2].length>0 && args.ONE==distance[2][1]){

            console.log(distance[2][2])
            return distance[2][2]
        }
    }


    async distance(args){
    
        // console.log(window)
        if(distance[0].length>0 && args.ONE==distance[0][0]){
            if(args.TWO=='>'){
                if(distance[0][2]>args.THREE){
                    return true
                }else{
                    return false
                }
            }else if(args.TWO=='<'){
                if(distance[0][2]<args.THREE){
                    return true
                }else{
                    return false
                }
            }else if(args.TWO=='='){
                if(distance[0][2]==args.THREE){
                    return true
                }else{
                    return false
                }
            }
        }
        return false
       
    }

    incline(args){
        if(distance[1].length>0 && args.ONE==distance[1][0]){
            if(args.TWO=='1' && distance[1][2]>0 && distance[1][3]==0 && distance[1][4]>0){
                return true
            }else if(args.TWO=='2' && distance[1][2]>0 && distance[1][3]==0 && distance[1][4]==0){
                return true
            }else if(args.TWO=='3' && distance[1][2]==0 && distance[1][3]>0 && distance[1][4]==0){
                return true
            }else if(args.TWO=='4' && distance[1][2]==0 && distance[1][3]>0 && distance[1][4]>0){
                return true
            }else if(args.TWO=='0' && distance[1][2]==0 && distance[1][3]==0){
                return true
            }else{
                return false
            }
        }
        return false
    }

    readdistance(args){
        if(distance[0].length>0 && args.ONE==distance[0][0]){
            return distance[0][2]
        }
    }

    readincline(args){
        if(distance[1].length>0 && args.ONE==distance[1][0]){
            if(args.TWO == '0'){
                // console.log(typeof distance[5]);
                
                if(distance[1][4]>100){
                    if(distance[1][2]==0){
                        return distance[1][2]
                    }
                    return '-'+distance[1][2]
                }else{
                    if(distance[1][2]==0){
                        return distance[1][2]
                    }else{
                        return distance[1][2]
                    }
                    
                }
                
            }else if(args.TWO == '1'){
                if(distance[1][4]>0){
                    if(distance[1][3]==0){
                        return distance[1][3]
                    }
                    return '-'+distance[1][3]
                }else{
                    if(distance[1][3]==0){
                        return distance[1][3]
                    }else{
                        return distance[1][3]
                    }
                }
            }
        }
    }

    motoranagle(args){
        if(distance[6].length>0 && args.ONE==distance[6][0]){
            if(distance[6][3]==0){
                return distance[6][2]
            }else if(distance[6][3]==1){
                return (-1)*distance[6][2]
            }
        }
    }

}


module.exports = BricksSensors;
