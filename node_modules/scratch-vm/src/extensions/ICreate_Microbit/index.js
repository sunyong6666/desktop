/*microbit 主板扩展 */
const ArgumentType = require('../../extension-support/argument-type');
const BlockType = require('../../extension-support/block-type');

class MicrobitIcreate { 
    getInfo() {
      return {
        id: 'MicrobitIcreate',
        name: 'Micro:bit V2主板', 

        //模块
        blocks: [
          {
            blockType: BlockType.LABEL,
            text: "点阵",
          },
          {
            opcode: 'ICM_showImage',//显示图像
            blockType: BlockType.COMMAND,
            text: '显示图片[IMAGE]',
            arguments: { 
                IMAGE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_DisplayImage'
                }
            }
          },
          {
            opcode: 'ICM_showSelfImage',//显示自定义图像
            blockType: BlockType.COMMAND,
            text: '显示图标[MATRIX]',
            arguments: {
                MATRIX: {
                    type: ArgumentType.MATRIX,
                    defaultValue: "0101011111111110111000100"
                }
            }
          },
          {
            opcode: 'ICM_showString',//显示字符串
            blockType: BlockType.COMMAND,
            text: '显示字符串[TEXT]',
            arguments: {
                TEXT: {
                    type: ArgumentType.STRING,
                    defaultValue: 'hello'
                }
            }
          },
          {
            opcode: 'ICM_scrollShowString',//滚动显示字符串
            blockType: BlockType.COMMAND,
            text: '滚动显示字符串[TEXT]',
            arguments: {
                TEXT: {
                    type: ArgumentType.STRING,
                    defaultValue: 'hello'
                }
            }
          },
          {
            opcode: 'ICM_setPixel',//设置像素
            blockType: BlockType.COMMAND,
            text: '设置像素 x[X] y[Y] 亮度[L]',
            arguments: {
                X: {
                    type: ArgumentType.NUMRES0_4,
                    defaultValue: 0
                },
                Y: {
                    type: ArgumentType.NUMRES0_4,
                    defaultValue: 0
                },
                L: {
                    type: ArgumentType.NUMRES0_9,
                    defaultValue: 9
                }
            },
          },
        //我一定会回来的~~~
        //   {
        //     opcode: 'ICM_showOff',//启用/禁用点阵
        //     blockType: BlockType.COMMAND,
        //     text: '[CHOICE]点阵',
        //     arguments: {
        //         CHOICE: {
        //             type: ArgumentType.STRING,
        //             menu: 'choice_DisplayOFF'
        //         }
        //     }
        //   },
          {
            opcode: 'ICM_showClear',//清除显示
            blockType: BlockType.COMMAND,
            text: '清除显示'
          },

          {
            blockType: BlockType.LABEL,
            text: "传感器",
          },
          {
            opcode: 'ICM_buttonPressed',//按键按下
            blockType: BlockType.BOOLEAN,
            text: '当按钮[CHOICE]被按下时',
            disableMonitor: true,
            arguments: {
                CHOICE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_Button'
                }
            }
          },
          {
            opcode: 'ICM_light',//亮度
            blockType: BlockType.REPORTER,
            text: '亮度',
            disableMonitor: true
          },
          {
            opcode: 'ICM_temperature',//温度
            blockType: BlockType.REPORTER,
            text: '温度',
            disableMonitor: true
          },
          {
            opcode: 'ICM_soundLevel',//声音
            blockType: BlockType.REPORTER,
            text: '声音',
            disableMonitor: true
          },
          {
            opcode: 'ICM_compassCalibrate',//指南针 校准
            blockType: BlockType.COMMAND,
            text: '指南针 校准'
          },
          {
            opcode: 'ICM_compassHeading',//指南针朝向
            blockType: BlockType.REPORTER,
            text: '指南针朝向',
            disableMonitor: true
          },
          {
            opcode: 'ICM_magnetStrength',//磁力
            blockType: BlockType.REPORTER,
            text: '磁力[CHOICE]',
            disableMonitor: true,
            arguments: {
                CHOICE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_MagnetStrength'
                }
            }
          },
          {
            opcode: 'ICM_accelerometerGesture',//姿势
            blockType: BlockType.BOOLEAN,
            text: '[CHOICE]手势？',
            disableMonitor: true,
            arguments: {
                CHOICE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_Gesture'
                }
            }
          },
          {
            opcode: 'ICM_accelerometer',//加速度
            blockType: BlockType.REPORTER,
            text: '加速度[CHOICE]',
            disableMonitor: true,
            arguments: {
                CHOICE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_Accelerometer'
                }
            }
          },
          {
            blockType: BlockType.LABEL,
            text: "音乐",
          },
          {
            opcode: 'ICM_musicPlay',//播放音乐
            blockType: BlockType.COMMAND,
            text: '播放音乐[CHOICE]',
            arguments: {
                CHOICE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_MusicPlay'
                }
            }
          },
          {
            opcode: 'ICM_setTempo',//设置播放速度
            blockType: BlockType.COMMAND,
            text: '设置播放速度[TEXT]',
            arguments: {
                TEXT: {
                    type: ArgumentType.NUMRES40_500,
                    defaultValue: 120
                }
            }
          },
          {
            opcode: 'ICM_musicPitch',//播放音调直到结束
            blockType: BlockType.COMMAND,
            text: '音调 频率[TEXT]持续播放',
            arguments: {
                TEXT: {
                    type: ArgumentType.NUMRES20_10000,
                    defaultValue: 440
                }
            }
          },
          {
            opcode: 'ICM_musicStop',//停止持续播放
            blockType: BlockType.COMMAND,
            text: '停止持续播放'
          },
          {
            opcode: 'ICM_speechSay',//语音 说
            blockType: BlockType.COMMAND,
            text: '语音 说[TEXT]',
            arguments: {
                TEXT: {
                    type: ArgumentType.STRING,
                    defaultValue: 'Hello, world. How are you?'
                }
            }
          },
          {
            opcode: 'ICM_audioPlay',//播放富有表现力的声音
            blockType: BlockType.COMMAND,
            text: '播放富有表现力的声音[CHOICE]',
            arguments: {
                CHOICE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_AudioPlay'
                }
            }
          },
          {
            opcode: 'ICM_setVolume',//音量
            blockType: BlockType.COMMAND,
            text: '设置音量[TEXT]',
            arguments: {
                TEXT: {
                    type: ArgumentType.NUMRES0_255,
                    defaultValue: 128
                }  
            }
          },
          {
            opcode: 'ICM_speakerOff',//关闭、启用扬声器
            blockType: BlockType.COMMAND,
            text: '[CHOICE]扬声器',
            arguments: {
                CHOICE: {
                    type: ArgumentType.STRING,
                    menu: 'choice_SpeakerOff'
                }
            }
          }
        ],




        menus: {
            choice_DisplayImage: {//选择显示图像
              acceptReporters: false,
              items: ['心形', '心形_小','快乐','微笑','悲伤','困惑','生气','睡着','惊讶','傻傻的','极好的','是','否','不感兴趣的','鸭子','长颈鹿','吃豆人','幽灵','骷髅']
            },
            choice_DisplayOFF: {//选择启用点阵
                acceptReporters: false,
                items: ['启用', '停用']
            },
            choice_Button: {//选择按钮
                acceptReporters: false,
                items: ['A', 'B']
            },
            choice_MagnetStrength:{//选择磁力
                acceptReporters: false,
                items: ['X', 'Y','Z','强度']
            },
            choice_Gesture:{//选择姿势
                acceptReporters: false,
                items: ['摇晃', '标志朝上','标志朝下','正面朝上','正面朝下','左','右','自由落体','3g']
            },
            choice_Accelerometer:{//选择加速度
                acceptReporters: false,
                items: ['X', 'Y','Z']
            },
            choice_MusicPlay:{//选择播放音乐
                acceptReporters: false,
                items: ['鼓点叭叮', '反面角色','生日快乐','布鲁斯','追逐','哒哒哒噔','演艺人','葬礼','放克音乐','向下跳','向上跳','彩虹猫','欢乐颂','能力减弱','能力增强','前奏','笑点','PYTHON','铃声','哇哇哇哇','婚礼']
            },
            choice_AudioPlay:{//选择富有表现力声音
                acceptReporters: false,
                items: ['咯咯笑', '快乐','你好','神秘的','难过','滑','飙升','弹簧','闪烁','打哈欠']
            },
            choice_SpeakerOff:{//选择关闭打开扬声器
                acceptReporters: false,
                items: ['关闭', '打开']
            }
        }
      };
    }



 

    //--------------------显示---------------------------
  
    //显示图像
    async ICM_showImage(args) {
        await ICMB_send(`display.show(Image.${DICT_displayImage[args.IMAGE]})`) ;
        return
    }
    //显示自定义图像
    async ICM_showSelfImage(args){
        let replaced = args.MATRIX.replace(/1/g, '9');// 1替换成9
        let result = replaced.match(/.{1,5}/g).join(':');//每5个字符分割一次
        await ICMB_send(`display.show(Image("${result}"))`) ;
    }
    //显示字符串
    async ICM_showString(args){
        await ICMB_send(`display.show("${args.TEXT}")`) ;
    }
    //滚动显示字符串
    async ICM_scrollShowString(args){
        await ICMB_send(`display.scroll("${args.TEXT}")`) ;
    }
    //设置像素
    async ICM_setPixel(args){
        await ICMB_send(`display.set_pixel(${args.X},${args.Y},${args.L})`) ;
    }
    //启用/禁用点阵
    // ICM_showOff(args){
    //     let code='';
    //     if(args.CHOICE == '启用'){
    //         code = "on"
    //     }else if(args.CHOICE == '停用'){
    //         code = "off"
    //     }
    //     ICMB_send(`display.${code}()`) ;
    // }
    //清除显示
    async ICM_showClear(){
        await ICMB_send(`display.clear()`) ;
    }

    //-----------------------传感器----------------------------------------
    //按钮
    ICM_buttonPressed(args){
        let code='';
        if(args.CHOICE == 'A'){
            code = "button_a"
        }else if(args.CHOICE == 'B'){
            code = "button_b"
        }
        return ICMB_read(`${code}.is_pressed()`) ;
    }
    //亮度
    ICM_light(){
        return ICMB_read(`display.read_light_level()`) ; 
    }
    //温度
    ICM_temperature(){
        return ICMB_read(`temperature()`) ; 
    }
    //声音
    ICM_soundLevel(){
        return ICMB_read(`microphone.sound_level()`) ; 
    }
    //指南针校准
    async ICM_compassCalibrate(){
        await ICMB_send(`compass.calibrate()`); 
    }
    //指南针朝向
    ICM_compassHeading(){
        return ICMB_read(`compass.heading()`) ; 
    }
    //磁力
    ICM_magnetStrength(args){
        let code='';
        if(args.CHOICE == 'X'){
            code = "get_x"
        }else if(args.CHOICE == 'Y'){
            code = "get_y"
        }else if(args.CHOICE == 'Z'){
            code = "get_z"
        }else if(args.CHOICE == '强度'){
            code = "get_field_strength"
        }
        return ICMB_read(`compass.${code}()`) ; 
    }
    //手势
    ICM_accelerometerGesture(args){
        let code='';
        if(args.CHOICE == '摇晃'){
            code = "shake"
        }else if(args.CHOICE == '标志朝上'){
            code = "up"
        }else if(args.CHOICE == '标志朝下'){
            code = "down"
        }else if(args.CHOICE == '正面朝上'){
            code = "face up"
        }else if(args.CHOICE == '正面朝下'){
            code = "face down"
        }else if(args.CHOICE == '左'){
            code = "left"
        }else if(args.CHOICE == '右'){
            code = "right"
        }else if(args.CHOICE == '自由落体'){
            code = "freefall"
        }else if(args.CHOICE == '3g'){
            code = "3g"
        }
        return ICMB_read(`accelerometer.was_gesture("${code}")`);
    }
    //加速度
    ICM_accelerometer(args){
        let code='';
        if(args.CHOICE == 'X'){
            code = "get_x"
        }else if(args.CHOICE == 'Y'){
            code = "get_y"
        }else if(args.CHOICE == 'Z'){
            code = "get_z"
        }
        return ICMB_read(`accelerometer.${code}()`) ; 
    }

    // -----------------------音乐---------------------------------------
    //播放音乐
    async ICM_musicPlay(args){
        //import music
        let code=DICT_musicPlay[args.CHOICE];
        await ICMB_send(`music.play(music.${code})`)
    }
    //设置播放速度
    async ICM_setTempo(args){
        //import music
        await ICMB_send(`music.set_tempo(bpm=${args.TEXT})`)
    }
    //音调 频率持续播放
    async ICM_musicPitch(args){
        //import music
        await ICMB_send(`music.pitch(${args.TEXT})`)
    }
    //停止持续播放
    async ICM_musicStop(args){
        //import music
        await ICMB_send(`music.stop()`)
    }
    //语音 说
    async ICM_speechSay(args){
        //import speech
        await ICMB_send(`speech.say("${args.TEXT}")`)
    }
    //播放富有表现力的声音
    async ICM_audioPlay(args){
        let code=DICT_audioPlay[args.CHOICE];
        await ICMB_send(`audio.play(Sound.${code})`)
    }
    //音量
    async ICM_setVolume(args){
        await ICMB_send(`set_volume(${args.TEXT})`)
    }
    //关闭、启用扬声器
    async ICM_speakerOff(args){
        let code = 'on';
        if(args.CHOICE == '关闭'){
            code = 'off'
        }
        await ICMB_send(`speaker.${code}()`)
    }


    
}





let DICT_displayImage = {'心形':"HEART",
'心形_小':"HEART_SMALL",
'快乐':"HAPPY",
'微笑':"SMILE",
'悲伤':"SAD",
'困惑':"CONFUSED",
'生气':"ANGRY",
'睡着':"ASLEEP",
'惊讶':"SURPRISED",
'傻傻的':"SILLY",
'极好的':"FABULOUS",
'是':"YES",
'否':"NO",
'不感兴趣的':"MEH",
'鸭子':"DUCK",
'长颈鹿':"GIRAFFE",
'吃豆人':"PACMAN",
'幽灵':"GHOST",
'骷髅':"SKULL"
}

let DICT_musicPlay = {'鼓点叭叮':"BA_DING",
'反面角色':"BADDY",
'生日快乐':"BIRTHDAY",
'布鲁斯':"BLUES",
'追逐':"CHASE",
'哒哒哒噔':"DADADADUM",
'演艺人':"ENTERTAINER",
'葬礼':"FUNERAL",
'放克音乐':"FUNK",
'向下跳':"JUMP_DOWN",
'向上跳':"JUMP_UP",
'彩虹猫':"NYAN",
'欢乐颂':"ODE",
'能力减弱':"POWER_DOWN",
'能力增强':"POWER_UP",
'前奏':"PRELUDE",
'笑点':"PUNCHLINE",
'PYTHON':"PYTHON",
'铃声':"RINGTONE",
'哇哇哇哇':"WAWAWAWAA",
'婚礼':"WEDDING"
}

let DICT_audioPlay = {'咯咯笑':"GIGGLE",
'快乐':"HAPPY",
'你好':"HELLO",
'神秘的':"MYSTERIOUS",
'难过':"SAD",
'滑':"SLIDE",
'飙升':"SOARING",
'弹簧':"SPRING",
'闪烁':"TWINKLE",
'打哈欠':"YAWN"
}

//发送
async function ICMB_send(str){
    //console.log('[发送]', str);
    // 发送命令到主进程
    try {
        const result = await window.EditorPreload.sendCommandToDevice(str);
        //console.log('[收到返回]', result.response || result.error);
        if(!result.success){
            showToast(result.error)
        }
        return result;
    } catch (e) {
        console.error('[发送失败]', e);
        return { success: false, error: e.message };
    }
}
//读取
async function ICMB_read(str){
    //console.log('[读取]', str);
    try {
        const result = await window.EditorPreload.sendCommandToDevice(str);
        if (result.success) {
            const raw = result.response.trim();
            //console.log('[读取返回]', raw);
            const lines = raw.split(/\r?\n/).map(l => l.trim()).filter(l => l);// 拆成多行

            // 去掉首行和末行
            if (lines.length >= 2 && lines[lines.length - 1] === '>>>') {
                lines.pop(); 
            }
            const contentLines = lines.slice(1);

            return contentLines.length === 1 ? contentLines[0] : contentLines;
        } else {
            //console.error('[读取失败]', result.error);
            showToast(result.error)
            return null;
        }
    } catch (e) {
        console.error('[读取异常]', e);
        return null;
    }
}

module.exports = MicrobitIcreate;


// 显示Toast提示
function showToast(message) {
    const toast = document.createElement('div');
    Object.assign(toast.style, {
        position: 'fixed',
        top: '20px',
        left: '50%',
        transform: 'translateX(-50%)',
        backgroundColor: '#333',
        color: 'white',
        padding: '10px 20px',
        borderRadius: '4px',
        zIndex: '1001',
        animation: 'fadeInOut 3s'
    });
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}
/*
进入repl模式先发送import 各个库以启用


*/