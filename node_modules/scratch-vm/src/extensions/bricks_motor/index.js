const BlockType = require('../../extension-support/block-type');
const ArgumentType = require('../../extension-support/argument-type');
const { maxSatisfying } = require('semver');
const socket=require('../../util/localSocket')

class BricksMotor {

  constructor(runtime){
    this.runtime=runtime

    if(!socket.getSocket()){
      socket.setSocket()
    }
  }
  getInfo() {
    return {
      id: 'bricksmotor',
      name: '电机',
      color1: '#6633ff',
      blocks: [
        // {
        //     opcode: 'motoranagle',
        //     blockType: BlockType.REPORTER,
        //     text: '端口[ONE]读取角度',
        //     arguments:{
        //         ONE:{
        //             type: ArgumentType.STRING,
        //             menu: 'FORMAT_MENU',
        //             defaultValue:1
        //         }
        //     }
        // },
        {
          opcode: 'motorSpeed',
          blockType: BlockType.COMMAND,
          text: '端口[ONE]以[TWO]速度[THREE]运行',
          arguments:{
            ONE:{
                type: ArgumentType.STRING,
                menu: 'FORMAT_MENU'
            },
            TWO:{
                type: ArgumentType.NUMBER,
                defaultValue: 50,
                min:0,
                max:100
            },
            THREE:{
                type: ArgumentType.STRING,
                menu: 'FORMAT_MENU_STATE'
            }
          }
        }, 
        {
            opcode: 'motorSpeedCir',
            blockType: BlockType.COMMAND,
            text: '端口[ONE]以[TWO]速度[THREE]运行[FOUR][FIVE]',
            arguments:{
              ONE:{
                  type: ArgumentType.STRING,
                  menu: 'FORMAT_MENU'
              },
              TWO:{
                  type: ArgumentType.STRING,
                  defaultValue: 50
              },
              THREE:{
                  type: ArgumentType.STRING,
                  menu: 'FORMAT_MENU_STATE'
              },
              FOUR:{
                type: ArgumentType.STRING,
                  defaultValue: 1
              },
              FIVE:{
                type: ArgumentType.STRING,
                  menu: 'FORMAT_MENU_MODE'
              }
            }
        },
        {
            opcode: 'setZero',
            blockType: BlockType.COMMAND,
            text: '端口[ONE]设置当前位置为0点',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                }
            }
        },
        {
            opcode: 'moveto',
            blockType: BlockType.COMMAND,
            text: '端口[ONE]以[TWO]速度 运行至[THREE]度',
            arguments:{
              ONE:{
                  type: ArgumentType.STRING,
                  menu: 'FORMAT_MENU'
              },
              TWO:{
                  type: ArgumentType.STRING,
                  defaultValue: 50
              },
              THREE:{
                  type: ArgumentType.STRING,
                  defaultValue: 0
              }
            }
        },
        {
            opcode: 'stop',
            blockType: BlockType.COMMAND,
            text: '端口[ONE]停止电机',
            arguments:{
                ONE:{
                    type: ArgumentType.STRING,
                    menu: 'FORMAT_MENU'
                }
            }
        },

      ],
      menus: {
        FORMAT_MENU: {
          acceptReporters: false,
          items: [
            {
              text: '1',
              value: '7'
            },
            {
              text: '2',
              value: '0'
            },
            {
                text: '3',
                value: '6'
            },
            {
                text: '4',
                value: '1'
              },
              {
                text: '5',
                value: '5'
              },
              {
                text: '6',
                value: '2'
              },
              {
                text: '7',
                value: '4'
              },
              {
                text: '8',
                value: '3'
              },
          ]
        },
        FORMAT_MENU_STATE:{
            acceptReporters: false,
            items: [
                {
                    text: '正转',
                    value: '1'
                },
                {
                    text: '反转',
                    value: '-1'
                },
                {
                    text: '停止',
                    value: '0'
                },
            ]
        },
        FORMAT_MENU_MODE:{
            acceptReporters: false,
            items: [
                {
                    text: '圈',
                    value: '1'
                },
                {
                    text: '度',
                    value: '2'
                },
                {
                    text: '秒',
                    value: '3'
                },
            ]
        }
      }
    };
  }

  // motoranagle(args){
  //   return args.ONE
  // }
  async motorSpeed(args){
    // socket.getSocket().send('11111')
    let data=[]
    data.push(Number(args.ONE))
    data.push(103)
    data.push(Number(args.TWO))
    if(args.THREE=='-1'){
      data.push(2)
    }else{
      data.push(Number(args.THREE))
    }
    data.push(0)

    socket.getSocket().send(JSON.stringify(data))
    await new Promise(resolve => setTimeout(resolve, 100)); 

  }


  splitIntoHighLowByte(number) {
    // 提取高八位（高字节）
    const highByte = (number >> 8) & 0xFF;
  
    // 提取低八位（低字节）
    const lowByte = number & 0xFF;
  
    return [highByte, lowByte]  ;
  }
  

  async motorSpeedCir(args){
    let data=[]
    //端口
    data.push(Number(args.ONE))
    //标志位
    data.push(103)
    //速度
    data.push(Number(args.TWO))
    //方向x转动单位
    if(args.THREE=='-1'){
      data.push(2*(Number(args.FIVE)+2))
    }else{
      data.push(Number(args.THREE)*(Number(args.FIVE)+2))
    }
    let result=this.splitIntoHighLowByte(Number(args.FOUR))
    result.forEach((byte)=>{
      data.push(byte)
    })
    console.log(data)
    socket.getSocket().send(JSON.stringify(data))
    await new Promise(resolve => setTimeout(resolve, 100)); 
  }
  async setZero(args){

    let data=[]
    data.push(Number(args.ONE))
    data.push(103)
    data.push(50)
    data.push(22)
    data.push(0)
    data.push(0)


    socket.getSocket().send(JSON.stringify(data))
    await new Promise(resolve => setTimeout(resolve, 100)); 
  }
  async moveto(args){

    let data=[]
    data.push(Number(args.ONE))
    data.push(103)
    data.push(Number(args.TWO))
    data.push(13)

    let result=this.splitIntoHighLowByte(Number(args.THREE))
    result.forEach((byte)=>{
      data.push(byte)
    })

    socket.getSocket().send(JSON.stringify(data))
    await new Promise(resolve => setTimeout(resolve, 100)); 
  }
  async stop(args){

    let data =[Number(args.ONE),103,0,0,0]
    socket.getSocket().send(JSON.stringify(data))
    await new Promise(resolve => setTimeout(resolve, 200)); 
  }

//   hello() {
//     console.log('执行了')
//     return 'World!';
//   }
//   strictlyEquals(args) {
//     return args.ONE === args.TWO;
//   }
}


module.exports = BricksMotor;
