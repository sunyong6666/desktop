const BlockType = require('../../extension-support/block-type');
const ArgumentType = require('../../extension-support/argument-type')
const socket=require('../../util/socket-connect')
class robotemote {

    constructor(runtime){
        this.runtime=runtime


        this.flag='0'
        this.channel = new BroadcastChannel('flag_channel');
        this.channel.addEventListener('message', (event) => {
            console.log('Received flag data:', event.data);
            this.flag=event.data
            // if(event.data=='1'){
            //     eventSource = new EventSource('http://192.168.4.1:8083/stream');
            //     eventSource.onerror = function(error) {
            //         console.error('Error:', error);
            //         eventSource.close();
            //     };
            //     eventSource.onmessage = function(event) {
            //         // output.innerHTML = "Received from server: " + event.data;
            //         // console.log(event.data)
            //         // console.log(Date.now())

            //         scratchGet=JSON.parse(event.data)
                    
            //     };
            // }else if(event.data=='0'){
            //     try{
            //         eventSource.close();
            //     }catch(e){

            //     }
            // }
        });
        this.mode=true
        this.channelMode=new BroadcastChannel('mode')
        this.channelMode.addEventListener('message',(event)=>{
            this.mode=event.data
        })


        this.line;


        this.whatSendFun='net'
        this.channelPort = new BroadcastChannel('channelPort')
        this.channelPort.addEventListener('message',(event)=>{
            console.log(event.data)
            if(event.data){
                this.whatSendFun='port'
            }else{
                this.whatSendFun='net'
            }
            
        })



    }
    getInfo() {
    return {
        id: 'robotemote',
        name: 'emote',
        color1: '#ff1493',
        blocks: [
            {
                opcode: 'showEmote',
                blockType: BlockType.COMMAND,
                text: '显示表情[ONE]',
                arguments:{
                    ONE:{
                        type: ArgumentType.STRING,
                        menu:'SHOW_EMOTE'
                    },
                },
            },


        ],
        menus: {
            SHOW_EMOTE:{
                acceptReporters: false,
                items: [
                    {
                        text: '1',
                        value: '1'
                    },
                    {
                        text: '2',
                        value: '2'
                    },
                    {
                        text: '3',
                        value: '3'
                    },
                    {
                        text: '4',
                        value: '4'
                    },
                    {
                        text: '5',
                        value: '5'
                    }
                    
                ]
            }
        }
  
    };
    }

    async showEmote(args){
            if(this.mode){
    
    
                let jsonData={
                    "command":"display",
                    "params":{
                        "mode":4,
                        "lum":1,
                        "image":[],
                        "var":"",
                        "pos_x":0,
                        "pos_y":0,
                        "num":Number(args.ONE),
                        "way":0
                    }
                }
                // let str = `robot.send_OLED(1,[${hexArr}])\r\r`;
                let str = JSON.stringify(jsonData)
            
                if(this.whatSendFun=='net'){
                    if(socket.checkWebSocketStatus()==4 || socket.checkWebSocketStatus()==0){
                        console.log('断开连接，尝试重连')
                        let context=[]
                        context.push(str)
                        await socket.setSocket(context)
                    }else if(socket.checkWebSocketStatus()==2){
                        socket.getSocket().send(str);
                        await new Promise(resolve => setTimeout(resolve, 50));  // 等待1秒
                    }
        
                    socket.setLastPostTime(Date.now())
                }else if(this.whatSendFun=='port'){
                    this.channelPort.postMessage(str)
                }
            
                
                
            }
        }

}


module.exports = robotemote;
