{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{1556:function(t,e,n){\"use strict\";n.r(e),n.d(e,\"resources\",(function(){return s}));const s={\"userscript.js\":async t=>{let{addon:e,console:n}=t;const s=e.tab.traps.vm;let r=!1;document.addEventListener(\"mousedown\",(function(t){r=t.shiftKey}),{capture:!0});const a=s.stopDrag;s.stopDrag=function(){const t=r||e.settings.get(\"drag_while_stopped\")&&!e.tab.redux.state.scratchGui.vmStatus.running;for(var n=arguments.length,s=new Array(n),i=0;i<n;i++)s[i]=arguments[i];if(t||e.self.disabled)return a.call(this,...s);const o=this.setEditingTarget;this.setEditingTarget=()=>{};const c=a.call(this,...s);return this.setEditingTarget=o,c};const i=s.getTargetIdForDrawableId;s.getTargetIdForDrawableId=function(){const t=r||e.settings.get(\"drag_while_stopped\")&&!e.tab.redux.state.scratchGui.vmStatus.running;for(var n=arguments.length,s=new Array(n),a=0;a<n;a++)s[a]=arguments[a];const o=i.call(this,...s);if(t||e.self.disabled)return o;if(null!==o){const t=this.runtime.getTargetById(o);if(t&&!t.draggable)return null}return o}}}}}]);","name":"14.index.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[14],{\n\n/***/ 1556:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"resources\", function() { return /* binding */ resources; });\n\n// CONCATENATED MODULE: ./node_modules/scratch-gui/src/addons/addons/disable-stage-drag-select/userscript.js\n/* harmony default export */ var userscript = (async _ref => {\n  let {\n    addon,\n    console\n  } = _ref;\n  const vm = addon.tab.traps.vm;\n  let shiftKeyPressed = false;\n  document.addEventListener(\"mousedown\", function (e) {\n    shiftKeyPressed = e.shiftKey;\n  }, {\n    capture: true\n  });\n\n  // Do not focus sprite after dragging it\n  const oldStopDrag = vm.stopDrag;\n  vm.stopDrag = function () {\n    const allowDrag = shiftKeyPressed || addon.settings.get(\"drag_while_stopped\") && !addon.tab.redux.state.scratchGui.vmStatus.running;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (allowDrag || addon.self.disabled) return oldStopDrag.call(this, ...args);\n    const setEditingTarget = this.setEditingTarget;\n    this.setEditingTarget = () => {};\n    const r = oldStopDrag.call(this, ...args);\n    this.setEditingTarget = setEditingTarget;\n    return r;\n  };\n\n  // Don't let the editor drag sprites that aren't marked as draggable\n  const oldGetTargetIdForDrawableId = vm.getTargetIdForDrawableId;\n  vm.getTargetIdForDrawableId = function () {\n    const allowDrag = shiftKeyPressed || addon.settings.get(\"drag_while_stopped\") && !addon.tab.redux.state.scratchGui.vmStatus.running;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    const targetId = oldGetTargetIdForDrawableId.call(this, ...args);\n    if (allowDrag || addon.self.disabled) return targetId;\n    if (targetId !== null) {\n      const target = this.runtime.getTargetById(targetId);\n      if (target && !target.draggable) {\n        return null;\n      }\n    }\n    return targetId;\n  };\n});\n// CONCATENATED MODULE: ./node_modules/scratch-gui/src/addons/addons/disable-stage-drag-select/_runtime_entry.js\n/* generated by pull.js */\n\nconst resources = {\n  \"userscript.js\": userscript\n};\n\n/***/ })\n\n}]);","inputSourceMap":null}