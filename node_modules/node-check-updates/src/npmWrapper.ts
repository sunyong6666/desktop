import semver from "semver";
import { desc } from "semver-sort";

import { get } from "./https";
import { hasPeerDependencyConflicts } from "./conflictDetector";
import type { Dependency, ValidatedString } from "./types";
import { objectToArray } from "./util";

export async function findCompatibleVersion(
  packageName: string,
  currentVersion: string,
  dependencies: Dependency[]
): Promise<ValidatedString> {
  const options = {
    hostname: "registry.npmjs.org",
    port: 443,
    path: `/${packageName}`,
    method: "GET",
  };

  const data = await get(options);
  const metadata = JSON.parse(data);

  // Get the latest version
  const latestVersion = metadata["dist-tags"].latest;

  const hasConflicts = hasPeerDependencyConflicts(
    dependencies,
    objectToArray(metadata["versions"][latestVersion].peerDependencies)
  );

  if (!hasConflicts) {
    return latestVersion; // Return the latest version if no conflicts
  }

  // Find the newest version that does not conflict with package.json dependencies
  let compatibleVersion = latestVersion;

  // Filter versions that have peerDependencies
  const versionsWithPeerDependencies = Object.keys(
    metadata.versions || {}
  ).filter((version) => {
    const versionMetadata = metadata.versions[version];
    return (
      versionMetadata.peerDependencies &&
      Object.keys(versionMetadata.peerDependencies).length > 0
    );
  });

  // Sort filtered versions in ascending order
  const sortedVersions = desc(versionsWithPeerDependencies);

  for (const version of sortedVersions) {
    if (!semver.gt(version, currentVersion)) {
      continue; // Skip versions lower than or equal to the current version
    }

    const hasConflicts = await hasPeerDependencyConflicts(
      dependencies,
      objectToArray(metadata["versions"][version].peerDependencies)
    );

    if (!hasConflicts) {
      compatibleVersion = version;
      break;
    }
  }

  // Return the compatible version, or false if no compatible version was found
  return compatibleVersion === latestVersion ? false : compatibleVersion;
}
